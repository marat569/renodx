#include "./common.hlsl"

Texture2D<float> ReadonlyDepth : register(t0);

Texture2D<float4> RE_POSTPROCESS_Color : register(t1);

Texture2D<float> tFilterTempMap1 : register(t2);

Texture3D<float> tVolumeMap : register(t3);

struct RadialBlurComputeResult {
  float computeAlpha;
};

StructuredBuffer<RadialBlurComputeResult> ComputeResultSRV : register(t4);

Texture3D<float4> tTextureMap0 : register(t5);

Texture3D<float4> tTextureMap1 : register(t6);

Texture3D<float4> tTextureMap2 : register(t7);

Texture2D<float4> ImagePlameBase : register(t8);

Texture2D<float> ImagePlameAlpha : register(t9);

cbuffer SceneInfo : register(b0) {
  row_major float4x4 viewProjMat : packoffset(c000.x);
  row_major float3x4 transposeViewMat : packoffset(c004.x);
  row_major float3x4 transposeViewInvMat : packoffset(c007.x);
  float4 projElement[2] : packoffset(c010.x);
  float4 projInvElements[2] : packoffset(c012.x);
  row_major float4x4 viewProjInvMat : packoffset(c014.x);
  row_major float4x4 prevViewProjMat : packoffset(c018.x);
  float3 ZToLinear : packoffset(c022.x);
  float subdivisionLevel : packoffset(c022.w);
  float2 screenSize : packoffset(c023.x);
  float2 screenInverseSize : packoffset(c023.z);
  float2 cullingHelper : packoffset(c024.x);
  float cameraNearPlane : packoffset(c024.z);
  float cameraFarPlane : packoffset(c024.w);
  float4 viewFrustum[6] : packoffset(c025.x);
  float4 clipplane : packoffset(c031.x);
  float2 vrsVelocityThreshold : packoffset(c032.x);
  uint GPUVisibleMask : packoffset(c032.z);
  uint resolutionRatioPacked : packoffset(c032.w);
};

cbuffer CameraKerare : register(b1) {
  float kerare_scale : packoffset(c000.x);
  float kerare_offset : packoffset(c000.y);
  float kerare_brightness : packoffset(c000.z);
};

cbuffer TonemapParam : register(b2) {
  float contrast : packoffset(c000.x);
  float linearBegin : packoffset(c000.y);
  float linearLength : packoffset(c000.z);
  float toe : packoffset(c000.w);
  float maxNit : packoffset(c001.x);
  float linearStart : packoffset(c001.y);
  float displayMaxNitSubContrastFactor : packoffset(c001.z);
  float contrastFactor : packoffset(c001.w);
  float mulLinearStartContrastFactor : packoffset(c002.x);
  float invLinearBegin : packoffset(c002.y);
  float madLinearStartContrastFactor : packoffset(c002.z);
};

cbuffer DynamicRangeConversionParam : register(b3) {
  float useDynamicRangeConversion : packoffset(c000.x);
  float exposureScale : packoffset(c000.y);
  float kneeStartNit : packoffset(c000.z);
  float knee : packoffset(c000.w);
};

cbuffer CBHazeFilterParams : register(b4) {
  float fHazeFilterStart : packoffset(c000.x);
  float fHazeFilterInverseRange : packoffset(c000.y);
  float fHazeFilterHeightStart : packoffset(c000.z);
  float fHazeFilterHeightInverseRange : packoffset(c000.w);
  float4 fHazeFilterUVWOffset : packoffset(c001.x);
  float fHazeFilterScale : packoffset(c002.x);
  float fHazeFilterBorder : packoffset(c002.y);
  float fHazeFilterBorderFade : packoffset(c002.z);
  float fHazeFilterDepthDiffBias : packoffset(c002.w);
  uint fHazeFilterAttribute : packoffset(c003.x);
  uint fHazeFilterReserved1 : packoffset(c003.y);
  uint fHazeFilterReserved2 : packoffset(c003.z);
  uint fHazeFilterReserved3 : packoffset(c003.w);
};

cbuffer LensDistortionParam : register(b5) {
  float fDistortionCoef : packoffset(c000.x);
  float fRefraction : packoffset(c000.y);
  uint aberrationEnable : packoffset(c000.z);
  uint distortionType : packoffset(c000.w);
  float fCorrectCoef : packoffset(c001.x);
  uint reserve1 : packoffset(c001.y);
  uint reserve2 : packoffset(c001.z);
  uint reserve3 : packoffset(c001.w);
};

cbuffer PaniniProjectionParam : register(b6) {
  float4 fOptimizedParam : packoffset(c000.x);
};

cbuffer RadialBlurRenderParam : register(b7) {
  float4 cbRadialColor : packoffset(c000.x);
  float2 cbRadialScreenPos : packoffset(c001.x);
  float2 cbRadialMaskSmoothstep : packoffset(c001.z);
  float2 cbRadialMaskRate : packoffset(c002.x);
  float cbRadialBlurPower : packoffset(c002.z);
  float cbRadialSharpRange : packoffset(c002.w);
  uint cbRadialBlurFlags : packoffset(c003.x);
  float cbRadialReserve0 : packoffset(c003.y);
  float cbRadialReserve1 : packoffset(c003.z);
  float cbRadialReserve2 : packoffset(c003.w);
};

cbuffer FilmGrainParam : register(b8) {
  float2 fNoisePower : packoffset(c000.x);
  float2 fNoiseUVOffset : packoffset(c000.z);
  float fNoiseDensity : packoffset(c001.x);
  float fNoiseContrast : packoffset(c001.y);
  float fBlendRate : packoffset(c001.z);
  float fReverseNoiseSize : packoffset(c001.w);
};

cbuffer ColorCorrectTexture : register(b9) {
  float fTextureSize : packoffset(c000.x);
  float fTextureBlendRate : packoffset(c000.y);
  float fTextureBlendRate2 : packoffset(c000.z);
  float fTextureInverseSize : packoffset(c000.w);
  row_major float4x4 fColorMatrix : packoffset(c001.x);
};

cbuffer ColorDeficientTable : register(b10) {
  float4 cvdR : packoffset(c000.x);
  float4 cvdG : packoffset(c001.x);
  float4 cvdB : packoffset(c002.x);
};

cbuffer ImagePlaneParam : register(b11) {
  float4 ColorParam : packoffset(c000.x);
  float Levels_Rate : packoffset(c001.x);
  float Levels_Range : packoffset(c001.y);
  uint Blend_Type : packoffset(c001.z);
};

cbuffer CBControl : register(b12) {
  uint cPassEnabled : packoffset(c000.x);
};

SamplerState PointClamp : register(s1, space32);

SamplerState BilinearWrap : register(s4, space32);

SamplerState BilinearClamp : register(s5, space32);

SamplerState BilinearBorder : register(s6, space32);

SamplerState TrilinearClamp : register(s9, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float4 Kerare : Kerare,
  linear float Exposure : Exposure
) : SV_Target {
  float4 SV_Target;
  float3 untonemapped;

  int _51 = (uint)(cPassEnabled) & 1;
  bool _52 = (_51 != 0);
  bool _55 = ((uint)(distortionType) == 0);
  bool _56 = _52 && _55;
  bool _57 = ((uint)(distortionType) == 1);
  bool _58 = _52 && _57;
  int _59 = (uint)(cPassEnabled) & 64;
  bool _60 = (_59 != 0);
  float _63 = Kerare.x / Kerare.w;
  float _64 = Kerare.y / Kerare.w;
  float _65 = Kerare.z / Kerare.w;
  float _66 = dot(float3(_63, _64, _65), float3(_63, _64, _65));
  float _67 = rsqrt(_66);
  float _68 = _67 * _65;
  float _69 = abs(_68);
  float _71 = kerare_scale * _69;
  float _73 = _71 + kerare_offset;
  float _74 = saturate(_73);
  float _75 = 1.0f - _74;
  float _76 = _69 * _69;
  float _77 = _76 * _76;
  float _78 = _77 * _75;
  float _79 = _78 + kerare_brightness;
  float _80 = saturate(_79);
  float _81 = _80 * Exposure;
  float _205;
  float _206;
  float _338;
  float _339;
  float _351;
  float _352;
  float _356;
  float _357;
  float _469;
  float _470;
  float _471;
  float _546;
  float _601;
  float _656;
  float _657;
  float _658;
  float _793;
  float _794;
  float _926;
  float _927;
  float _939;
  float _940;
  float _944;
  float _945;
  float _1057;
  float _1058;
  float _1059;
  float _1172;
  float _1173;
  float _1307;
  float _1308;
  float _1320;
  float _1321;
  float _1331;
  float _1332;
  float _1333;
  float _1439;
  float _1440;
  float _1441;
  float _1446;
  float _1447;
  float _1448;
  float _1449;
  float _1450;
  float _1451;
  float _1452;
  float _1453;
  float _1454;
  float _1902;
  float _1903;
  float _1904;
  float _2295;
  float _2296;
  float _2297;
  float _2477;
  float _2478;
  float _2479;
  float _2493;
  float _2494;
  float _2495;
  float _2521;
  float _2522;
  float _2523;
  float _2534;
  float _2535;
  float _2536;
  float _2578;
  float _2594;
  float _2610;
  float _2638;
  float _2639;
  float _2640;
  float _2678;
  float _2689;
  float _2700;
  float _2742;
  float _2753;
  float _2764;
  float _2815;
  float _2826;
  float _2837;
  float _2858;
  float _2859;
  float _2860;
  float _2874;
  float _2875;
  float _2876;
  float _2911;
  float _2912;
  float _2913;
  float _2985;
  float _2986;
  float _2987;
  float _3035;
  float _3060;
  float _3061;
  float _3062;
  if (_56) {
    float _92 = screenInverseSize.x * SV_Position.x;
    float _93 = screenInverseSize.y * SV_Position.y;
    float _94 = _92 + -0.5f;
    float _95 = _93 + -0.5f;
    float _96 = dot(float2(_94, _95), float2(_94, _95));
    float _97 = _96 * fDistortionCoef;
    float _98 = _97 + 1.0f;
    float _99 = _98 * fCorrectCoef;
    float _100 = _99 * _94;
    float _101 = _99 * _95;
    float _102 = _100 + 0.5f;
    float _103 = _101 + 0.5f;
    bool _104 = ((uint)(aberrationEnable) == 0);
    if (_104) {
      if (_60) {
        int _111 = (uint)(fHazeFilterAttribute) & 2;
        bool _112 = (_111 != 0);
        int _113 = (uint)(fHazeFilterAttribute) & 4;
        bool _114 = (_113 == 0);
        float _117 = tFilterTempMap1.Sample(BilinearWrap, float2(_102, _103));
        if (_112) {
          float _122 = ReadonlyDepth.SampleLevel(PointClamp, float2(_102, _103), 0.0f);
          float _124 = _102 * 2.0f;
          float _125 = _124 * screenSize.x;
          float _126 = _125 * screenInverseSize.x;
          float _127 = _103 * 2.0f;
          float _128 = _127 * screenSize.y;
          float _129 = _128 * screenInverseSize.y;
          float _130 = _126 + -1.0f;
          float _131 = 1.0f - _129;
          float _152 = _130 * (viewProjInvMat[0].x);
          float _153 = mad(_131, (viewProjInvMat[1].x), _152);
          float _154 = mad(_122.x, (viewProjInvMat[2].x), _153);
          float _155 = _154 + (viewProjInvMat[3].x);
          float _156 = _130 * (viewProjInvMat[0].y);
          float _157 = mad(_131, (viewProjInvMat[1].y), _156);
          float _158 = mad(_122.x, (viewProjInvMat[2].y), _157);
          float _159 = _158 + (viewProjInvMat[3].y);
          float _160 = _130 * (viewProjInvMat[0].z);
          float _161 = mad(_131, (viewProjInvMat[1].z), _160);
          float _162 = mad(_122.x, (viewProjInvMat[2].z), _161);
          float _163 = _162 + (viewProjInvMat[3].z);
          float _164 = _130 * (viewProjInvMat[0].w);
          float _165 = mad(_131, (viewProjInvMat[1].w), _164);
          float _166 = mad(_122.x, (viewProjInvMat[2].w), _165);
          float _167 = _166 + (viewProjInvMat[3].w);
          float _168 = 1.0f / _167;
          float _169 = _168 * _155;
          float _170 = _168 * _159;
          float _171 = _168 * _163;
          float _178 = _169 - (transposeViewInvMat[0].w);
          float _179 = _170 - (transposeViewInvMat[1].w);
          float _180 = _171 - (transposeViewInvMat[2].w);
          float _181 = _178 * _178;
          float _182 = _179 * _179;
          float _183 = _182 + _181;
          float _184 = _180 * _180;
          float _185 = _183 + _184;
          float _186 = sqrt(_185);
          float _189 = _186 - fHazeFilterStart;
          float _191 = _189 * fHazeFilterInverseRange;
          float _193 = _170 - fHazeFilterHeightStart;
          float _195 = _193 * fHazeFilterHeightInverseRange;
          float _196 = max(_191, _195);
          float _197 = _117.x * _196;
          float _198 = saturate(_197);
          _205 = _198;
          _206 = _122.x;
        } else {
          int _200 = (uint)(fHazeFilterAttribute) & 1;
          bool _201 = (_200 != 0);
          float _202 = 1.0f - _117.x;
          float _203 = select(_201, _202, _117.x);
          _205 = _203;
          _206 = 0.0f;
        }
        float _211 = -0.0f - _103;
        float _224 = (transposeViewInvMat[0].x) * _102;
        float _225 = mad(_211, (transposeViewInvMat[0].y), _224);
        float _226 = mad(-1.0f, (transposeViewInvMat[0].z), _225);
        float _227 = (transposeViewInvMat[1].x) * _102;
        float _228 = mad(_211, (transposeViewInvMat[1].y), _227);
        float _229 = mad(-1.0f, (transposeViewInvMat[1].z), _228);
        float _230 = (transposeViewInvMat[2].x) * _102;
        float _231 = mad(_211, (transposeViewInvMat[2].y), _230);
        float _232 = mad(-1.0f, (transposeViewInvMat[2].z), _231);
        float _234 = fHazeFilterUVWOffset.w * _226;
        float _235 = fHazeFilterUVWOffset.w * _229;
        float _236 = fHazeFilterUVWOffset.w * _232;
        float _237 = _234 + fHazeFilterUVWOffset.x;
        float _238 = _235 + fHazeFilterUVWOffset.y;
        float _239 = _236 + fHazeFilterUVWOffset.z;
        float _242 = tVolumeMap.Sample(BilinearWrap, float3(_237, _238, _239));
        float _244 = _242.x * 0.5f;
        float _245 = _234 * 2.0f;
        float _246 = _235 * 2.0f;
        float _247 = _236 * 2.0f;
        float _248 = _245 + fHazeFilterUVWOffset.x;
        float _249 = _246 + fHazeFilterUVWOffset.y;
        float _250 = _247 + fHazeFilterUVWOffset.z;
        float _251 = tVolumeMap.Sample(BilinearWrap, float3(_248, _249, _250));
        float _253 = _251.x * 0.25f;
        float _254 = _253 + _244;
        float _255 = _234 * 4.0f;
        float _256 = _235 * 4.0f;
        float _257 = _236 * 4.0f;
        float _258 = _255 + fHazeFilterUVWOffset.x;
        float _259 = _256 + fHazeFilterUVWOffset.y;
        float _260 = _257 + fHazeFilterUVWOffset.z;
        float _261 = tVolumeMap.Sample(BilinearWrap, float3(_258, _259, _260));
        float _263 = _261.x * 0.125f;
        float _264 = _254 + _263;
        float _265 = _234 * 8.0f;
        float _266 = _235 * 8.0f;
        float _267 = _236 * 8.0f;
        float _268 = _265 + fHazeFilterUVWOffset.x;
        float _269 = _266 + fHazeFilterUVWOffset.y;
        float _270 = _267 + fHazeFilterUVWOffset.z;
        float _271 = tVolumeMap.Sample(BilinearWrap, float3(_268, _269, _270));
        float _273 = _271.x * 0.0625f;
        float _274 = _264 + _273;
        float _275 = fHazeFilterUVWOffset.x + 0.5f;
        float _276 = fHazeFilterUVWOffset.y + 0.5f;
        float _277 = fHazeFilterUVWOffset.z + 0.5f;
        float _278 = _234 + _275;
        float _279 = _235 + _276;
        float _280 = _236 + _277;
        float _281 = tVolumeMap.Sample(BilinearWrap, float3(_278, _279, _280));
        float _283 = _281.x * 0.5f;
        float _284 = _245 + _275;
        float _285 = _246 + _276;
        float _286 = _247 + _277;
        float _287 = tVolumeMap.Sample(BilinearWrap, float3(_284, _285, _286));
        float _289 = _287.x * 0.25f;
        float _290 = _289 + _283;
        float _291 = _255 + _275;
        float _292 = _256 + _276;
        float _293 = _257 + _277;
        float _294 = tVolumeMap.Sample(BilinearWrap, float3(_291, _292, _293));
        float _296 = _294.x * 0.125f;
        float _297 = _290 + _296;
        float _298 = _265 + _275;
        float _299 = _266 + _276;
        float _300 = _267 + _277;
        float _301 = tVolumeMap.Sample(BilinearWrap, float3(_298, _299, _300));
        float _303 = _301.x * 0.0625f;
        float _304 = _297 + _303;
        float _305 = _274 * 2.0f;
        float _306 = _304 * 2.0f;
        float _307 = _305 + -1.0f;
        float _308 = _306 + -1.0f;
        float _309 = _307 * _205;
        float _312 = _309 * fHazeFilterScale;
        float _313 = fHazeFilterScale * _205;
        float _314 = _313 * _308;
        if (!_114) {
          float _316 = abs(_100);
          float _317 = abs(_101);
          float _319 = _316 - fHazeFilterBorder;
          float _320 = _317 - fHazeFilterBorder;
          float _321 = max(_319, 0.0f);
          float _322 = max(_320, 0.0f);
          float _323 = min(_321, 1.0f);
          float _324 = min(_322, 1.0f);
          float _325 = 0.5f / fHazeFilterBorder;
          float _326 = _325 * _323;
          float _327 = _325 * _324;
          float _329 = _326 * fHazeFilterBorderFade;
          float _330 = _327 * fHazeFilterBorderFade;
          float _331 = max(_329, _330);
          float _332 = saturate(_331);
          float _333 = _332 * _312;
          float _334 = _332 * _314;
          float _335 = _312 - _333;
          float _336 = _314 - _334;
          _338 = _335;
          _339 = _336;
        } else {
          _338 = _312;
          _339 = _314;
        }
        if (_112) {
          float _341 = _338 + _102;
          float _342 = _339 + _103;
          float _344 = ReadonlyDepth.Sample(BilinearWrap, float2(_341, _342));
          float _346 = _344.x - _206;
          bool _348 = !(_346 >= fHazeFilterDepthDiffBias);
          if (!_348) {
            _351 = 0.0f;
            _352 = 0.0f;
          } else {
            _351 = _338;
            _352 = _339;
          }
        } else {
          _351 = _338;
          _352 = _339;
        }
        float _353 = _351 + _102;
        float _354 = _352 + _103;
        _356 = _353;
        _357 = _354;
      } else {
        _356 = _102;
        _357 = _103;
      }
      float4 _360 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_356, _357));
      float _364 = _360.x * _81;
      float _365 = _360.y * _81;
      float _366 = _360.z * _81;
      untonemapped = float3(_364, _365, _366);

      float _367 = max(_364, _365);
      float _368 = max(_367, _366);
      bool _369 = isfinite(_368);
      if (_369) {
        float _375 = invLinearBegin * _364;
        bool _376 = (_364 >= linearBegin);
        float _377 = _375 * _375;
        float _378 = _375 * 2.0f;
        float _379 = 3.0f - _378;
        float _380 = _377 * _379;
        float _381 = invLinearBegin * _365;
        bool _382 = (_365 >= linearBegin);
        float _383 = _381 * _381;
        float _384 = _381 * 2.0f;
        float _385 = 3.0f - _384;
        float _386 = _383 * _385;
        float _387 = invLinearBegin * _366;
        bool _388 = (_366 >= linearBegin);
        float _389 = _387 * _387;
        float _390 = _387 * 2.0f;
        float _391 = 3.0f - _390;
        float _392 = _389 * _391;
        float _393 = 1.0f - _380;
        float _394 = select(_376, 0.0f, _393);
        float _395 = 1.0f - _386;
        float _396 = select(_382, 0.0f, _395);
        float _397 = 1.0f - _392;
        float _398 = select(_388, 0.0f, _397);
        bool _401 = (_364 < linearStart);
        bool _402 = (_365 < linearStart);
        bool _403 = (_366 < linearStart);
        float _404 = select(_401, 0.0f, 1.0f);
        float _405 = select(_402, 0.0f, 1.0f);
        float _406 = select(_403, 0.0f, 1.0f);
        float _407 = 1.0f - _404;
        float _408 = _407 - _394;
        float _409 = 1.0f - _405;
        float _410 = _409 - _396;
        float _411 = 1.0f - _406;
        float _412 = _411 - _398;
        float _414 = log2(_375);
        float _415 = log2(_381);
        float _416 = log2(_387);
        float _417 = _414 * toe;
        float _418 = _415 * toe;
        float _419 = _416 * toe;
        float _420 = exp2(_417);
        float _421 = exp2(_418);
        float _422 = exp2(_419);
        float _423 = _420 * _394;
        float _424 = _423 * linearBegin;
        float _425 = _421 * _396;
        float _426 = _425 * linearBegin;
        float _427 = _422 * _398;
        float _428 = _427 * linearBegin;
        float _430 = contrast * _364;
        float _431 = contrast * _365;
        float _432 = contrast * _366;
        float _434 = _430 + madLinearStartContrastFactor;
        float _435 = _431 + madLinearStartContrastFactor;
        float _436 = _432 + madLinearStartContrastFactor;
        float _437 = _434 * _408;
        float _438 = _435 * _410;
        float _439 = _436 * _412;
        float _440 = _437 + _424;
        float _441 = _438 + _426;
        float _442 = _439 + _428;
        float _446 = contrastFactor * _364;
        float _447 = contrastFactor * _365;
        float _448 = contrastFactor * _366;
        float _450 = _446 + mulLinearStartContrastFactor;
        float _451 = _447 + mulLinearStartContrastFactor;
        float _452 = _448 + mulLinearStartContrastFactor;
        float _453 = exp2(_450);
        float _454 = exp2(_451);
        float _455 = exp2(_452);
        float _456 = _453 * displayMaxNitSubContrastFactor;
        float _457 = _454 * displayMaxNitSubContrastFactor;
        float _458 = _455 * displayMaxNitSubContrastFactor;
        float _459 = maxNit - _456;
        float _460 = maxNit - _457;
        float _461 = maxNit - _458;
        float _462 = _459 * _404;
        float _463 = _460 * _405;
        float _464 = _461 * _406;
        float _465 = _440 + _462;
        float _466 = _441 + _463;
        float _467 = _442 + _464;
        _469 = _465;
        _470 = _466;
        _471 = _467;
      } else {
        _469 = 1.0f;
        _470 = 1.0f;
        _471 = 1.0f;
      }
      float _472 = saturate(_469);
      float _473 = saturate(_470);
      _656 = _471;
      _657 = _472;
      _658 = _473;
    } else {
      float _475 = _96 + fRefraction;
      float _476 = _475 * fDistortionCoef;
      float _477 = _476 + 1.0f;
      float _478 = _94 * fCorrectCoef;
      float _479 = _478 * _477;
      float _480 = _95 * fCorrectCoef;
      float _481 = _480 * _477;
      float _482 = _479 + 0.5f;
      float _483 = _481 + 0.5f;
      float _484 = _475 + fRefraction;
      float _485 = _484 * fDistortionCoef;
      float _486 = _485 + 1.0f;
      float _487 = _478 * _486;
      float _488 = _480 * _486;
      float _489 = _487 + 0.5f;
      float _490 = _488 + 0.5f;
      float4 _493 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_102, _103));
      float _497 = _493.x * _81;
      float _498 = _493.y * _81;
      float _499 = _493.z * _81;
      untonemapped = float3(_497, _498, _499);
      float _500 = max(_497, _498);
      float _501 = max(_500, _499);
      bool _502 = isfinite(_501);
      if (_502) {
        float _508 = invLinearBegin * _497;
        bool _509 = (_497 >= linearBegin);
        float _510 = _508 * _508;
        float _511 = _508 * 2.0f;
        float _512 = 3.0f - _511;
        float _513 = _510 * _512;
        float _514 = 1.0f - _513;
        float _515 = select(_509, 0.0f, _514);
        bool _518 = (_497 < linearStart);
        float _519 = select(_518, 0.0f, 1.0f);
        float _520 = 1.0f - _519;
        float _521 = _520 - _515;
        float _523 = log2(_508);
        float _524 = _523 * toe;
        float _525 = exp2(_524);
        float _526 = linearBegin * _525;
        float _527 = _526 * _515;
        float _529 = contrast * _497;
        float _531 = _529 + madLinearStartContrastFactor;
        float _532 = _531 * _521;
        float _533 = _532 + _527;
        float _537 = contrastFactor * _497;
        float _539 = _537 + mulLinearStartContrastFactor;
        float _540 = exp2(_539);
        float _541 = _540 * displayMaxNitSubContrastFactor;
        float _542 = maxNit - _541;
        float _543 = _542 * _519;
        float _544 = _533 + _543;
        _546 = _544;
      } else {
        _546 = 1.0f;
      }
      float _547 = saturate(_546);
      float4 _548 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_482, _483));
      float _552 = _548.x * _81;
      float _553 = _548.y * _81;
      float _554 = _548.z * _81;
      untonemapped = float3(_552, _553, _554);
      float _555 = max(_552, _553);
      float _556 = max(_555, _554);
      bool _557 = isfinite(_556);
      if (_557) {
        float _563 = invLinearBegin * _553;
        bool _564 = (_553 >= linearBegin);
        float _565 = _563 * _563;
        float _566 = _563 * 2.0f;
        float _567 = 3.0f - _566;
        float _568 = _565 * _567;
        float _569 = 1.0f - _568;
        float _570 = select(_564, 0.0f, _569);
        bool _573 = (_553 < linearStart);
        float _574 = select(_573, 0.0f, 1.0f);
        float _575 = 1.0f - _574;
        float _576 = _575 - _570;
        float _578 = log2(_563);
        float _579 = _578 * toe;
        float _580 = exp2(_579);
        float _581 = linearBegin * _580;
        float _582 = _581 * _570;
        float _584 = contrast * _553;
        float _586 = _584 + madLinearStartContrastFactor;
        float _587 = _586 * _576;
        float _588 = _587 + _582;
        float _592 = contrastFactor * _553;
        float _594 = _592 + mulLinearStartContrastFactor;
        float _595 = exp2(_594);
        float _596 = _595 * displayMaxNitSubContrastFactor;
        float _597 = maxNit - _596;
        float _598 = _597 * _574;
        float _599 = _588 + _598;
        _601 = _599;
      } else {
        _601 = 1.0f;
      }
      float _602 = saturate(_601);
      float4 _603 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_489, _490));
      float _607 = _603.x * _81;
      float _608 = _603.y * _81;
      float _609 = _603.z * _81;
      untonemapped = float3(_607, _608, _609);
      float _610 = max(_607, _608);
      float _611 = max(_610, _609);
      bool _612 = isfinite(_611);
      if (_612) {
        float _618 = invLinearBegin * _609;
        bool _619 = (_609 >= linearBegin);
        float _620 = _618 * _618;
        float _621 = _618 * 2.0f;
        float _622 = 3.0f - _621;
        float _623 = _620 * _622;
        float _624 = 1.0f - _623;
        float _625 = select(_619, 0.0f, _624);
        bool _628 = (_609 < linearStart);
        float _629 = select(_628, 0.0f, 1.0f);
        float _630 = 1.0f - _629;
        float _631 = _630 - _625;
        float _633 = log2(_618);
        float _634 = _633 * toe;
        float _635 = exp2(_634);
        float _636 = linearBegin * _635;
        float _637 = _636 * _625;
        float _639 = contrast * _609;
        float _641 = _639 + madLinearStartContrastFactor;
        float _642 = _641 * _631;
        float _643 = _642 + _637;
        float _647 = contrastFactor * _609;
        float _649 = _647 + mulLinearStartContrastFactor;
        float _650 = exp2(_649);
        float _651 = _650 * displayMaxNitSubContrastFactor;
        float _652 = maxNit - _651;
        float _653 = _652 * _629;
        float _654 = _643 + _653;
        _656 = _654;
        _657 = _547;
        _658 = _602;
      } else {
        _656 = 1.0f;
        _657 = _547;
        _658 = _602;
      }
    }
    float _659 = saturate(_656);
    _1446 = _657;
    _1447 = _658;
    _1448 = _659;
    _1449 = fDistortionCoef;
    _1450 = 0.0f;
    _1451 = 0.0f;
    _1452 = 0.0f;
    _1453 = 0.0f;
    _1454 = fCorrectCoef;
  } else {
    if (_58) {
      float _670 = SV_Position.x * 2.0f;
      float _671 = _670 * screenInverseSize.x;
      float _672 = SV_Position.y * 2.0f;
      float _673 = _672 * screenInverseSize.y;
      float _674 = _671 + -1.0f;
      float _675 = _673 + -1.0f;
      float _676 = _674 * _674;
      float _677 = _676 + 1.0f;
      float _678 = sqrt(_677);
      float _679 = 1.0f / _678;
      float _680 = _679 + fOptimizedParam.x;
      float _681 = _678 * fOptimizedParam.z;
      float _682 = _681 * _680;
      float _683 = _679 + -1.0f;
      float _684 = _683 * fOptimizedParam.y;
      float _685 = _684 + 1.0f;
      float _686 = fOptimizedParam.w * 0.5f;
      float _687 = _686 * _674;
      float _688 = _687 * _682;
      float _689 = _686 * _675;
      float _690 = _689 * _685;
      float _691 = _690 * _682;
      float _692 = _688 + 0.5f;
      float _693 = _691 + 0.5f;
      if (_60) {
        int _699 = (uint)(fHazeFilterAttribute) & 2;
        bool _700 = (_699 != 0);
        int _701 = (uint)(fHazeFilterAttribute) & 4;
        bool _702 = (_701 == 0);
        float _705 = tFilterTempMap1.Sample(BilinearWrap, float2(_692, _693));
        if (_700) {
          float _710 = ReadonlyDepth.SampleLevel(PointClamp, float2(_692, _693), 0.0f);
          float _712 = screenSize.x * 2.0f;
          float _713 = _712 * _692;
          float _714 = _713 * screenInverseSize.x;
          float _715 = screenSize.y * 2.0f;
          float _716 = _715 * _693;
          float _717 = _716 * screenInverseSize.y;
          float _718 = _714 + -1.0f;
          float _719 = 1.0f - _717;
          float _740 = _718 * (viewProjInvMat[0].x);
          float _741 = mad(_719, (viewProjInvMat[1].x), _740);
          float _742 = mad(_710.x, (viewProjInvMat[2].x), _741);
          float _743 = _742 + (viewProjInvMat[3].x);
          float _744 = _718 * (viewProjInvMat[0].y);
          float _745 = mad(_719, (viewProjInvMat[1].y), _744);
          float _746 = mad(_710.x, (viewProjInvMat[2].y), _745);
          float _747 = _746 + (viewProjInvMat[3].y);
          float _748 = _718 * (viewProjInvMat[0].z);
          float _749 = mad(_719, (viewProjInvMat[1].z), _748);
          float _750 = mad(_710.x, (viewProjInvMat[2].z), _749);
          float _751 = _750 + (viewProjInvMat[3].z);
          float _752 = _718 * (viewProjInvMat[0].w);
          float _753 = mad(_719, (viewProjInvMat[1].w), _752);
          float _754 = mad(_710.x, (viewProjInvMat[2].w), _753);
          float _755 = _754 + (viewProjInvMat[3].w);
          float _756 = 1.0f / _755;
          float _757 = _756 * _743;
          float _758 = _756 * _747;
          float _759 = _756 * _751;
          float _766 = _757 - (transposeViewInvMat[0].w);
          float _767 = _758 - (transposeViewInvMat[1].w);
          float _768 = _759 - (transposeViewInvMat[2].w);
          float _769 = _766 * _766;
          float _770 = _767 * _767;
          float _771 = _770 + _769;
          float _772 = _768 * _768;
          float _773 = _771 + _772;
          float _774 = sqrt(_773);
          float _777 = _774 - fHazeFilterStart;
          float _779 = _777 * fHazeFilterInverseRange;
          float _781 = _758 - fHazeFilterHeightStart;
          float _783 = _781 * fHazeFilterHeightInverseRange;
          float _784 = max(_779, _783);
          float _785 = _705.x * _784;
          float _786 = saturate(_785);
          _793 = _786;
          _794 = _710.x;
        } else {
          int _788 = (uint)(fHazeFilterAttribute) & 1;
          bool _789 = (_788 != 0);
          float _790 = 1.0f - _705.x;
          float _791 = select(_789, _790, _705.x);
          _793 = _791;
          _794 = 0.0f;
        }
        float _799 = -0.0f - _693;
        float _812 = (transposeViewInvMat[0].x) * _692;
        float _813 = mad(_799, (transposeViewInvMat[0].y), _812);
        float _814 = mad(-1.0f, (transposeViewInvMat[0].z), _813);
        float _815 = (transposeViewInvMat[1].x) * _692;
        float _816 = mad(_799, (transposeViewInvMat[1].y), _815);
        float _817 = mad(-1.0f, (transposeViewInvMat[1].z), _816);
        float _818 = (transposeViewInvMat[2].x) * _692;
        float _819 = mad(_799, (transposeViewInvMat[2].y), _818);
        float _820 = mad(-1.0f, (transposeViewInvMat[2].z), _819);
        float _822 = fHazeFilterUVWOffset.w * _814;
        float _823 = fHazeFilterUVWOffset.w * _817;
        float _824 = fHazeFilterUVWOffset.w * _820;
        float _825 = _822 + fHazeFilterUVWOffset.x;
        float _826 = _823 + fHazeFilterUVWOffset.y;
        float _827 = _824 + fHazeFilterUVWOffset.z;
        float _830 = tVolumeMap.Sample(BilinearWrap, float3(_825, _826, _827));
        float _832 = _830.x * 0.5f;
        float _833 = _822 * 2.0f;
        float _834 = _823 * 2.0f;
        float _835 = _824 * 2.0f;
        float _836 = _833 + fHazeFilterUVWOffset.x;
        float _837 = _834 + fHazeFilterUVWOffset.y;
        float _838 = _835 + fHazeFilterUVWOffset.z;
        float _839 = tVolumeMap.Sample(BilinearWrap, float3(_836, _837, _838));
        float _841 = _839.x * 0.25f;
        float _842 = _841 + _832;
        float _843 = _822 * 4.0f;
        float _844 = _823 * 4.0f;
        float _845 = _824 * 4.0f;
        float _846 = _843 + fHazeFilterUVWOffset.x;
        float _847 = _844 + fHazeFilterUVWOffset.y;
        float _848 = _845 + fHazeFilterUVWOffset.z;
        float _849 = tVolumeMap.Sample(BilinearWrap, float3(_846, _847, _848));
        float _851 = _849.x * 0.125f;
        float _852 = _842 + _851;
        float _853 = _822 * 8.0f;
        float _854 = _823 * 8.0f;
        float _855 = _824 * 8.0f;
        float _856 = _853 + fHazeFilterUVWOffset.x;
        float _857 = _854 + fHazeFilterUVWOffset.y;
        float _858 = _855 + fHazeFilterUVWOffset.z;
        float _859 = tVolumeMap.Sample(BilinearWrap, float3(_856, _857, _858));
        float _861 = _859.x * 0.0625f;
        float _862 = _852 + _861;
        float _863 = fHazeFilterUVWOffset.x + 0.5f;
        float _864 = fHazeFilterUVWOffset.y + 0.5f;
        float _865 = fHazeFilterUVWOffset.z + 0.5f;
        float _866 = _822 + _863;
        float _867 = _823 + _864;
        float _868 = _824 + _865;
        float _869 = tVolumeMap.Sample(BilinearWrap, float3(_866, _867, _868));
        float _871 = _869.x * 0.5f;
        float _872 = _833 + _863;
        float _873 = _834 + _864;
        float _874 = _835 + _865;
        float _875 = tVolumeMap.Sample(BilinearWrap, float3(_872, _873, _874));
        float _877 = _875.x * 0.25f;
        float _878 = _877 + _871;
        float _879 = _843 + _863;
        float _880 = _844 + _864;
        float _881 = _845 + _865;
        float _882 = tVolumeMap.Sample(BilinearWrap, float3(_879, _880, _881));
        float _884 = _882.x * 0.125f;
        float _885 = _878 + _884;
        float _886 = _853 + _863;
        float _887 = _854 + _864;
        float _888 = _855 + _865;
        float _889 = tVolumeMap.Sample(BilinearWrap, float3(_886, _887, _888));
        float _891 = _889.x * 0.0625f;
        float _892 = _885 + _891;
        float _893 = _862 * 2.0f;
        float _894 = _892 * 2.0f;
        float _895 = _893 + -1.0f;
        float _896 = _894 + -1.0f;
        float _897 = _895 * _793;
        float _900 = _897 * fHazeFilterScale;
        float _901 = fHazeFilterScale * _793;
        float _902 = _901 * _896;
        if (!_702) {
          float _904 = abs(_688);
          float _905 = abs(_691);
          float _907 = _904 - fHazeFilterBorder;
          float _908 = _905 - fHazeFilterBorder;
          float _909 = max(_907, 0.0f);
          float _910 = max(_908, 0.0f);
          float _911 = min(_909, 1.0f);
          float _912 = min(_910, 1.0f);
          float _913 = 0.5f / fHazeFilterBorder;
          float _914 = _913 * _911;
          float _915 = _913 * _912;
          float _917 = _914 * fHazeFilterBorderFade;
          float _918 = _915 * fHazeFilterBorderFade;
          float _919 = max(_917, _918);
          float _920 = saturate(_919);
          float _921 = _920 * _900;
          float _922 = _920 * _902;
          float _923 = _900 - _921;
          float _924 = _902 - _922;
          _926 = _923;
          _927 = _924;
        } else {
          _926 = _900;
          _927 = _902;
        }
        if (_700) {
          float _929 = _926 + _692;
          float _930 = _927 + _693;
          float _932 = ReadonlyDepth.Sample(BilinearWrap, float2(_929, _930));
          float _934 = _932.x - _794;
          bool _936 = !(_934 >= fHazeFilterDepthDiffBias);
          if (!_936) {
            _939 = 0.0f;
            _940 = 0.0f;
          } else {
            _939 = _926;
            _940 = _927;
          }
        } else {
          _939 = _926;
          _940 = _927;
        }
        float _941 = _939 + _692;
        float _942 = _940 + _693;
        _944 = _941;
        _945 = _942;
      } else {
        _944 = _692;
        _945 = _693;
      }
      float4 _948 = RE_POSTPROCESS_Color.Sample(BilinearBorder, float2(_944, _945));
      float _952 = _948.x * _81;
      float _953 = _948.y * _81;
      float _954 = _948.z * _81;
      untonemapped = float3(_952, _953, _954);
      float _955 = max(_952, _953);
      float _956 = max(_955, _954);
      bool _957 = isfinite(_956);
      if (_957) {
        float _963 = invLinearBegin * _952;
        bool _964 = (_952 >= linearBegin);
        float _965 = _963 * _963;
        float _966 = _963 * 2.0f;
        float _967 = 3.0f - _966;
        float _968 = _965 * _967;
        float _969 = invLinearBegin * _953;
        bool _970 = (_953 >= linearBegin);
        float _971 = _969 * _969;
        float _972 = _969 * 2.0f;
        float _973 = 3.0f - _972;
        float _974 = _971 * _973;
        float _975 = invLinearBegin * _954;
        bool _976 = (_954 >= linearBegin);
        float _977 = _975 * _975;
        float _978 = _975 * 2.0f;
        float _979 = 3.0f - _978;
        float _980 = _977 * _979;
        float _981 = 1.0f - _968;
        float _982 = select(_964, 0.0f, _981);
        float _983 = 1.0f - _974;
        float _984 = select(_970, 0.0f, _983);
        float _985 = 1.0f - _980;
        float _986 = select(_976, 0.0f, _985);
        bool _989 = (_952 < linearStart);
        bool _990 = (_953 < linearStart);
        bool _991 = (_954 < linearStart);
        float _992 = select(_989, 0.0f, 1.0f);
        float _993 = select(_990, 0.0f, 1.0f);
        float _994 = select(_991, 0.0f, 1.0f);
        float _995 = 1.0f - _992;
        float _996 = _995 - _982;
        float _997 = 1.0f - _993;
        float _998 = _997 - _984;
        float _999 = 1.0f - _994;
        float _1000 = _999 - _986;
        float _1002 = log2(_963);
        float _1003 = log2(_969);
        float _1004 = log2(_975);
        float _1005 = _1002 * toe;
        float _1006 = _1003 * toe;
        float _1007 = _1004 * toe;
        float _1008 = exp2(_1005);
        float _1009 = exp2(_1006);
        float _1010 = exp2(_1007);
        float _1011 = _1008 * _982;
        float _1012 = _1011 * linearBegin;
        float _1013 = _1009 * _984;
        float _1014 = _1013 * linearBegin;
        float _1015 = _1010 * _986;
        float _1016 = _1015 * linearBegin;
        float _1018 = contrast * _952;
        float _1019 = contrast * _953;
        float _1020 = contrast * _954;
        float _1022 = _1018 + madLinearStartContrastFactor;
        float _1023 = _1019 + madLinearStartContrastFactor;
        float _1024 = _1020 + madLinearStartContrastFactor;
        float _1025 = _1022 * _996;
        float _1026 = _1023 * _998;
        float _1027 = _1024 * _1000;
        float _1028 = _1025 + _1012;
        float _1029 = _1026 + _1014;
        float _1030 = _1027 + _1016;
        float _1034 = contrastFactor * _952;
        float _1035 = contrastFactor * _953;
        float _1036 = contrastFactor * _954;
        float _1038 = _1034 + mulLinearStartContrastFactor;
        float _1039 = _1035 + mulLinearStartContrastFactor;
        float _1040 = _1036 + mulLinearStartContrastFactor;
        float _1041 = exp2(_1038);
        float _1042 = exp2(_1039);
        float _1043 = exp2(_1040);
        float _1044 = _1041 * displayMaxNitSubContrastFactor;
        float _1045 = _1042 * displayMaxNitSubContrastFactor;
        float _1046 = _1043 * displayMaxNitSubContrastFactor;
        float _1047 = maxNit - _1044;
        float _1048 = maxNit - _1045;
        float _1049 = maxNit - _1046;
        float _1050 = _1047 * _992;
        float _1051 = _1048 * _993;
        float _1052 = _1049 * _994;
        float _1053 = _1028 + _1050;
        float _1054 = _1029 + _1051;
        float _1055 = _1030 + _1052;
        _1057 = _1053;
        _1058 = _1054;
        _1059 = _1055;
      } else {
        _1057 = 1.0f;
        _1058 = 1.0f;
        _1059 = 1.0f;
      }
      float _1060 = saturate(_1057);
      float _1061 = saturate(_1058);
      float _1062 = saturate(_1059);
      _1446 = _1060;
      _1447 = _1061;
      _1448 = _1062;
      _1449 = 0.0f;
      _1450 = fOptimizedParam.x;
      _1451 = fOptimizedParam.y;
      _1452 = fOptimizedParam.z;
      _1453 = fOptimizedParam.w;
      _1454 = 1.0f;
    } else {
      if (!_60) {
        uint _1065 = uint(SV_Position.x);
        uint _1066 = uint(SV_Position.y);
        float4 _1068 = RE_POSTPROCESS_Color.Load(int3(_1065, _1066, 0));
        _1331 = _1068.x;
        _1332 = _1068.y;
        _1333 = _1068.z;
      } else {
        float _1076 = screenInverseSize.x * SV_Position.x;
        float _1077 = screenInverseSize.y * SV_Position.y;
        int _1080 = (uint)(fHazeFilterAttribute) & 2;
        bool _1081 = (_1080 != 0);
        int _1082 = (uint)(fHazeFilterAttribute) & 4;
        bool _1083 = (_1082 == 0);
        float _1086 = tFilterTempMap1.Sample(BilinearWrap, float2(_1076, _1077));
        if (_1081) {
          float _1091 = ReadonlyDepth.SampleLevel(PointClamp, float2(_1076, _1077), 0.0f);
          float _1093 = SV_Position.x * 2.0f;
          float _1094 = _1093 * screenInverseSize.x;
          float _1095 = SV_Position.y * 2.0f;
          float _1096 = _1095 * screenInverseSize.y;
          float _1097 = _1094 + -1.0f;
          float _1098 = 1.0f - _1096;
          float _1119 = _1097 * (viewProjInvMat[0].x);
          float _1120 = mad(_1098, (viewProjInvMat[1].x), _1119);
          float _1121 = mad(_1091.x, (viewProjInvMat[2].x), _1120);
          float _1122 = _1121 + (viewProjInvMat[3].x);
          float _1123 = _1097 * (viewProjInvMat[0].y);
          float _1124 = mad(_1098, (viewProjInvMat[1].y), _1123);
          float _1125 = mad(_1091.x, (viewProjInvMat[2].y), _1124);
          float _1126 = _1125 + (viewProjInvMat[3].y);
          float _1127 = _1097 * (viewProjInvMat[0].z);
          float _1128 = mad(_1098, (viewProjInvMat[1].z), _1127);
          float _1129 = mad(_1091.x, (viewProjInvMat[2].z), _1128);
          float _1130 = _1129 + (viewProjInvMat[3].z);
          float _1131 = _1097 * (viewProjInvMat[0].w);
          float _1132 = mad(_1098, (viewProjInvMat[1].w), _1131);
          float _1133 = mad(_1091.x, (viewProjInvMat[2].w), _1132);
          float _1134 = _1133 + (viewProjInvMat[3].w);
          float _1135 = 1.0f / _1134;
          float _1136 = _1135 * _1122;
          float _1137 = _1135 * _1126;
          float _1138 = _1135 * _1130;
          float _1145 = _1136 - (transposeViewInvMat[0].w);
          float _1146 = _1137 - (transposeViewInvMat[1].w);
          float _1147 = _1138 - (transposeViewInvMat[2].w);
          float _1148 = _1145 * _1145;
          float _1149 = _1146 * _1146;
          float _1150 = _1149 + _1148;
          float _1151 = _1147 * _1147;
          float _1152 = _1150 + _1151;
          float _1153 = sqrt(_1152);
          float _1156 = _1153 - fHazeFilterStart;
          float _1158 = _1156 * fHazeFilterInverseRange;
          float _1160 = _1137 - fHazeFilterHeightStart;
          float _1162 = _1160 * fHazeFilterHeightInverseRange;
          float _1163 = max(_1158, _1162);
          float _1164 = _1086.x * _1163;
          float _1165 = saturate(_1164);
          _1172 = _1165;
          _1173 = _1091.x;
        } else {
          int _1167 = (uint)(fHazeFilterAttribute) & 1;
          bool _1168 = (_1167 != 0);
          float _1169 = 1.0f - _1086.x;
          float _1170 = select(_1168, _1169, _1086.x);
          _1172 = _1170;
          _1173 = 0.0f;
        }
        float _1178 = -0.0f - _1077;
        float _1191 = (transposeViewInvMat[0].x) * _1076;
        float _1192 = mad(_1178, (transposeViewInvMat[0].y), _1191);
        float _1193 = mad(-1.0f, (transposeViewInvMat[0].z), _1192);
        float _1194 = (transposeViewInvMat[1].x) * _1076;
        float _1195 = mad(_1178, (transposeViewInvMat[1].y), _1194);
        float _1196 = mad(-1.0f, (transposeViewInvMat[1].z), _1195);
        float _1197 = (transposeViewInvMat[2].x) * _1076;
        float _1198 = mad(_1178, (transposeViewInvMat[2].y), _1197);
        float _1199 = mad(-1.0f, (transposeViewInvMat[2].z), _1198);
        float _1201 = fHazeFilterUVWOffset.w * _1193;
        float _1202 = fHazeFilterUVWOffset.w * _1196;
        float _1203 = fHazeFilterUVWOffset.w * _1199;
        float _1204 = _1201 + fHazeFilterUVWOffset.x;
        float _1205 = _1202 + fHazeFilterUVWOffset.y;
        float _1206 = _1203 + fHazeFilterUVWOffset.z;
        float _1209 = tVolumeMap.Sample(BilinearWrap, float3(_1204, _1205, _1206));
        float _1211 = _1209.x * 0.5f;
        float _1212 = _1201 * 2.0f;
        float _1213 = _1202 * 2.0f;
        float _1214 = _1203 * 2.0f;
        float _1215 = _1212 + fHazeFilterUVWOffset.x;
        float _1216 = _1213 + fHazeFilterUVWOffset.y;
        float _1217 = _1214 + fHazeFilterUVWOffset.z;
        float _1218 = tVolumeMap.Sample(BilinearWrap, float3(_1215, _1216, _1217));
        float _1220 = _1218.x * 0.25f;
        float _1221 = _1220 + _1211;
        float _1222 = _1201 * 4.0f;
        float _1223 = _1202 * 4.0f;
        float _1224 = _1203 * 4.0f;
        float _1225 = _1222 + fHazeFilterUVWOffset.x;
        float _1226 = _1223 + fHazeFilterUVWOffset.y;
        float _1227 = _1224 + fHazeFilterUVWOffset.z;
        float _1228 = tVolumeMap.Sample(BilinearWrap, float3(_1225, _1226, _1227));
        float _1230 = _1228.x * 0.125f;
        float _1231 = _1221 + _1230;
        float _1232 = _1201 * 8.0f;
        float _1233 = _1202 * 8.0f;
        float _1234 = _1203 * 8.0f;
        float _1235 = _1232 + fHazeFilterUVWOffset.x;
        float _1236 = _1233 + fHazeFilterUVWOffset.y;
        float _1237 = _1234 + fHazeFilterUVWOffset.z;
        float _1238 = tVolumeMap.Sample(BilinearWrap, float3(_1235, _1236, _1237));
        float _1240 = _1238.x * 0.0625f;
        float _1241 = _1231 + _1240;
        float _1242 = fHazeFilterUVWOffset.x + 0.5f;
        float _1243 = fHazeFilterUVWOffset.y + 0.5f;
        float _1244 = fHazeFilterUVWOffset.z + 0.5f;
        float _1245 = _1201 + _1242;
        float _1246 = _1202 + _1243;
        float _1247 = _1203 + _1244;
        float _1248 = tVolumeMap.Sample(BilinearWrap, float3(_1245, _1246, _1247));
        float _1250 = _1248.x * 0.5f;
        float _1251 = _1212 + _1242;
        float _1252 = _1213 + _1243;
        float _1253 = _1214 + _1244;
        float _1254 = tVolumeMap.Sample(BilinearWrap, float3(_1251, _1252, _1253));
        float _1256 = _1254.x * 0.25f;
        float _1257 = _1256 + _1250;
        float _1258 = _1222 + _1242;
        float _1259 = _1223 + _1243;
        float _1260 = _1224 + _1244;
        float _1261 = tVolumeMap.Sample(BilinearWrap, float3(_1258, _1259, _1260));
        float _1263 = _1261.x * 0.125f;
        float _1264 = _1257 + _1263;
        float _1265 = _1232 + _1242;
        float _1266 = _1233 + _1243;
        float _1267 = _1234 + _1244;
        float _1268 = tVolumeMap.Sample(BilinearWrap, float3(_1265, _1266, _1267));
        float _1270 = _1268.x * 0.0625f;
        float _1271 = _1264 + _1270;
        float _1272 = _1241 * 2.0f;
        float _1273 = _1271 * 2.0f;
        float _1274 = _1272 + -1.0f;
        float _1275 = _1273 + -1.0f;
        float _1276 = _1274 * _1172;
        float _1279 = _1276 * fHazeFilterScale;
        float _1280 = fHazeFilterScale * _1172;
        float _1281 = _1280 * _1275;
        if (!_1083) {
          float _1283 = _1076 + -0.5f;
          float _1284 = _1077 + -0.5f;
          float _1285 = abs(_1283);
          float _1286 = abs(_1284);
          float _1288 = _1285 - fHazeFilterBorder;
          float _1289 = _1286 - fHazeFilterBorder;
          float _1290 = max(_1288, 0.0f);
          float _1291 = max(_1289, 0.0f);
          float _1292 = min(_1290, 1.0f);
          float _1293 = min(_1291, 1.0f);
          float _1294 = 0.5f / fHazeFilterBorder;
          float _1295 = _1294 * _1292;
          float _1296 = _1294 * _1293;
          float _1298 = _1295 * fHazeFilterBorderFade;
          float _1299 = _1296 * fHazeFilterBorderFade;
          float _1300 = max(_1298, _1299);
          float _1301 = saturate(_1300);
          float _1302 = _1301 * _1279;
          float _1303 = _1301 * _1281;
          float _1304 = _1279 - _1302;
          float _1305 = _1281 - _1303;
          _1307 = _1304;
          _1308 = _1305;
        } else {
          _1307 = _1279;
          _1308 = _1281;
        }
        if (_1081) {
          float _1310 = _1307 + _1076;
          float _1311 = _1308 + _1077;
          float _1313 = ReadonlyDepth.Sample(BilinearWrap, float2(_1310, _1311));
          float _1315 = _1313.x - _1173;
          bool _1317 = !(_1315 >= fHazeFilterDepthDiffBias);
          if (!_1317) {
            _1320 = 0.0f;
            _1321 = 0.0f;
          } else {
            _1320 = _1307;
            _1321 = _1308;
          }
        } else {
          _1320 = _1307;
          _1321 = _1308;
        }
        float _1322 = _1320 + _1076;
        float _1323 = _1321 + _1077;
        float4 _1326 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_1322, _1323));
        _1331 = _1326.x;
        _1332 = _1326.y;
        _1333 = _1326.z;
      }
      float _1334 = _1331 * _81;
      float _1335 = _1332 * _81;
      float _1336 = _1333 * _81;
      untonemapped = float3(_1334, _1335, _1336);
      float _1337 = max(_1334, _1335);
      float _1338 = max(_1337, _1336);
      bool _1339 = isfinite(_1338);
      if (_1339) {
        float _1345 = invLinearBegin * _1334;
        bool _1346 = (_1334 >= linearBegin);
        float _1347 = _1345 * _1345;
        float _1348 = _1345 * 2.0f;
        float _1349 = 3.0f - _1348;
        float _1350 = _1347 * _1349;
        float _1351 = invLinearBegin * _1335;
        bool _1352 = (_1335 >= linearBegin);
        float _1353 = _1351 * _1351;
        float _1354 = _1351 * 2.0f;
        float _1355 = 3.0f - _1354;
        float _1356 = _1353 * _1355;
        float _1357 = invLinearBegin * _1336;
        bool _1358 = (_1336 >= linearBegin);
        float _1359 = _1357 * _1357;
        float _1360 = _1357 * 2.0f;
        float _1361 = 3.0f - _1360;
        float _1362 = _1359 * _1361;
        float _1363 = 1.0f - _1350;
        float _1364 = select(_1346, 0.0f, _1363);
        float _1365 = 1.0f - _1356;
        float _1366 = select(_1352, 0.0f, _1365);
        float _1367 = 1.0f - _1362;
        float _1368 = select(_1358, 0.0f, _1367);
        bool _1371 = (_1334 < linearStart);
        bool _1372 = (_1335 < linearStart);
        bool _1373 = (_1336 < linearStart);
        float _1374 = select(_1371, 0.0f, 1.0f);
        float _1375 = select(_1372, 0.0f, 1.0f);
        float _1376 = select(_1373, 0.0f, 1.0f);
        float _1377 = 1.0f - _1374;
        float _1378 = _1377 - _1364;
        float _1379 = 1.0f - _1375;
        float _1380 = _1379 - _1366;
        float _1381 = 1.0f - _1376;
        float _1382 = _1381 - _1368;
        float _1384 = log2(_1345);
        float _1385 = log2(_1351);
        float _1386 = log2(_1357);
        float _1387 = _1384 * toe;
        float _1388 = _1385 * toe;
        float _1389 = _1386 * toe;
        float _1390 = exp2(_1387);
        float _1391 = exp2(_1388);
        float _1392 = exp2(_1389);
        float _1393 = _1390 * _1364;
        float _1394 = _1393 * linearBegin;
        float _1395 = _1391 * _1366;
        float _1396 = _1395 * linearBegin;
        float _1397 = _1392 * _1368;
        float _1398 = _1397 * linearBegin;
        float _1400 = contrast * _1334;
        float _1401 = contrast * _1335;
        float _1402 = contrast * _1336;
        float _1404 = _1400 + madLinearStartContrastFactor;
        float _1405 = _1401 + madLinearStartContrastFactor;
        float _1406 = _1402 + madLinearStartContrastFactor;
        float _1407 = _1404 * _1378;
        float _1408 = _1405 * _1380;
        float _1409 = _1406 * _1382;
        float _1410 = _1407 + _1394;
        float _1411 = _1408 + _1396;
        float _1412 = _1409 + _1398;
        float _1416 = contrastFactor * _1334;
        float _1417 = contrastFactor * _1335;
        float _1418 = contrastFactor * _1336;
        float _1420 = _1416 + mulLinearStartContrastFactor;
        float _1421 = _1417 + mulLinearStartContrastFactor;
        float _1422 = _1418 + mulLinearStartContrastFactor;
        float _1423 = exp2(_1420);
        float _1424 = exp2(_1421);
        float _1425 = exp2(_1422);
        float _1426 = _1423 * displayMaxNitSubContrastFactor;
        float _1427 = _1424 * displayMaxNitSubContrastFactor;
        float _1428 = _1425 * displayMaxNitSubContrastFactor;
        float _1429 = maxNit - _1426;
        float _1430 = maxNit - _1427;
        float _1431 = maxNit - _1428;
        float _1432 = _1429 * _1374;
        float _1433 = _1430 * _1375;
        float _1434 = _1431 * _1376;
        float _1435 = _1410 + _1432;
        float _1436 = _1411 + _1433;
        float _1437 = _1412 + _1434;
        _1439 = _1435;
        _1440 = _1436;
        _1441 = _1437;
      } else {
        _1439 = 1.0f;
        _1440 = 1.0f;
        _1441 = 1.0f;
      }
      float _1442 = saturate(_1439);
      float _1443 = saturate(_1440);
      float _1444 = saturate(_1441);
      _1446 = _1442;
      _1447 = _1443;
      _1448 = _1444;
      _1449 = 0.0f;
      _1450 = 0.0f;
      _1451 = 0.0f;
      _1452 = 0.0f;
      _1453 = 0.0f;
      _1454 = 1.0f;
    }
  }
  int _1455 = (uint)(cPassEnabled) & 32;
  bool _1456 = (_1455 == 0);
  if (!_1456) {
    int _1474 = (uint)(cbRadialBlurFlags) & 2;
    bool _1475 = (_1474 != 0);
    float _1476 = float((bool)_1475);
    float _1477 = 1.0f - _1476;
    float _1480 = ComputeResultSRV[0].computeAlpha;
    float _1481 = _1480 * _1476;
    float _1482 = _1477 + _1481;
    float _1483 = _1482 * cbRadialColor.w;
    bool _1484 = (_1483 == 0.0f);
    if (!_1484) {
      float _1486 = _80 * Exposure;
      float _1491 = screenInverseSize.x * SV_Position.x;
      float _1492 = screenInverseSize.y * SV_Position.y;
      float _1493 = -0.5f - cbRadialScreenPos.x;
      float _1494 = _1493 + _1491;
      float _1495 = -0.5f - cbRadialScreenPos.y;
      float _1496 = _1495 + _1492;
      bool _1497 = (_1494 < 0.0f);
      float _1498 = 1.0f - _1491;
      float _1499 = select(_1497, _1498, _1491);
      bool _1500 = (_1496 < 0.0f);
      float _1501 = 1.0f - _1492;
      float _1502 = select(_1500, _1501, _1492);
      int _1503 = (uint)(cbRadialBlurFlags) & 1;
      bool _1504 = (_1503 != 0);
      float _1505 = dot(float2(_1494, _1496), float2(_1494, _1496));
      float _1506 = rsqrt(_1505);
      float _1507 = _1506 * cbRadialSharpRange;
      float _1508 = _1507 * _1494;
      float _1509 = _1507 * _1496;
      float _1510 = abs(_1508);
      float _1511 = abs(_1509);
      uint _1512 = uint(_1510);
      uint _1513 = uint(_1511);
      uint _1514 = _1513 + _1512;
      int _1515 = _1514 ^ 61;
      int _1516 = (uint)(_1514) >> 16;
      int _1517 = _1515 ^ _1516;
      uint _1518 = _1517 * 9;
      int _1519 = (uint)(_1518) >> 4;
      int _1520 = _1519 ^ _1518;
      uint _1521 = _1520 * 668265261;
      int _1522 = (uint)(_1521) >> 15;
      int _1523 = _1522 ^ _1521;
      float _1524 = float((uint)_1523);
      float _1525 = _1524 * 2.3283064365386963e-10f;
      float _1526 = select(_1504, _1525, 1.0f);
      float _1527 = _1494 * _1494;
      float _1528 = _1496 * _1496;
      float _1529 = _1527 + _1528;
      float _1530 = sqrt(_1529);
      float _1531 = max(1.0f, _1530);
      float _1532 = 1.0f / _1531;
      float _1533 = cbRadialBlurPower * -0.0011111111380159855f;
      float _1534 = _1533 * _1499;
      float _1535 = _1534 * _1526;
      float _1536 = _1535 * _1532;
      float _1537 = _1533 * _1502;
      float _1538 = _1537 * _1526;
      float _1539 = _1538 * _1532;
      float _1540 = _1536 + 1.0f;
      float _1541 = _1539 + 1.0f;
      float _1542 = _1540 * _1494;
      float _1543 = _1541 * _1496;
      float _1545 = cbRadialBlurPower * -0.002222222276031971f;
      float _1546 = _1545 * _1499;
      float _1547 = _1546 * _1526;
      float _1548 = _1547 * _1532;
      float _1549 = _1545 * _1502;
      float _1550 = _1549 * _1526;
      float _1551 = _1550 * _1532;
      float _1552 = _1548 + 1.0f;
      float _1553 = _1551 + 1.0f;
      float _1554 = _1552 * _1494;
      float _1555 = _1553 * _1496;
      float _1556 = cbRadialBlurPower * -0.0033333334140479565f;
      float _1557 = _1556 * _1499;
      float _1558 = _1557 * _1526;
      float _1559 = _1558 * _1532;
      float _1560 = _1556 * _1502;
      float _1561 = _1560 * _1526;
      float _1562 = _1561 * _1532;
      float _1563 = _1559 + 1.0f;
      float _1564 = _1562 + 1.0f;
      float _1565 = _1563 * _1494;
      float _1566 = _1564 * _1496;
      float _1567 = cbRadialBlurPower * -0.004444444552063942f;
      float _1568 = _1567 * _1499;
      float _1569 = _1568 * _1526;
      float _1570 = _1569 * _1532;
      float _1571 = _1567 * _1502;
      float _1572 = _1571 * _1526;
      float _1573 = _1572 * _1532;
      float _1574 = _1570 + 1.0f;
      float _1575 = _1573 + 1.0f;
      float _1576 = _1574 * _1494;
      float _1577 = _1575 * _1496;
      float _1578 = cbRadialBlurPower * -0.0055555556900799274f;
      float _1579 = _1578 * _1499;
      float _1580 = _1579 * _1526;
      float _1581 = _1580 * _1532;
      float _1582 = _1578 * _1502;
      float _1583 = _1582 * _1526;
      float _1584 = _1583 * _1532;
      float _1585 = _1581 + 1.0f;
      float _1586 = _1584 + 1.0f;
      float _1587 = _1585 * _1494;
      float _1588 = _1586 * _1496;
      float _1589 = cbRadialBlurPower * -0.006666666828095913f;
      float _1590 = _1589 * _1499;
      float _1591 = _1590 * _1526;
      float _1592 = _1591 * _1532;
      float _1593 = _1589 * _1502;
      float _1594 = _1593 * _1526;
      float _1595 = _1594 * _1532;
      float _1596 = _1592 + 1.0f;
      float _1597 = _1595 + 1.0f;
      float _1598 = _1596 * _1494;
      float _1599 = _1597 * _1496;
      float _1600 = cbRadialBlurPower * -0.007777777966111898f;
      float _1601 = _1600 * _1499;
      float _1602 = _1601 * _1526;
      float _1603 = _1602 * _1532;
      float _1604 = _1600 * _1502;
      float _1605 = _1604 * _1526;
      float _1606 = _1605 * _1532;
      float _1607 = _1603 + 1.0f;
      float _1608 = _1606 + 1.0f;
      float _1609 = _1607 * _1494;
      float _1610 = _1608 * _1496;
      float _1611 = cbRadialBlurPower * -0.008888889104127884f;
      float _1612 = _1611 * _1499;
      float _1613 = _1612 * _1526;
      float _1614 = _1613 * _1532;
      float _1615 = _1611 * _1502;
      float _1616 = _1615 * _1526;
      float _1617 = _1616 * _1532;
      float _1618 = _1614 + 1.0f;
      float _1619 = _1617 + 1.0f;
      float _1620 = _1618 * _1494;
      float _1621 = _1619 * _1496;
      float _1622 = cbRadialBlurPower * -0.009999999776482582f;
      float _1623 = _1622 * _1499;
      float _1624 = _1623 * _1526;
      float _1625 = _1624 * _1532;
      float _1626 = _1622 * _1502;
      float _1627 = _1626 * _1526;
      float _1628 = _1627 * _1532;
      float _1629 = _1625 + 1.0f;
      float _1630 = _1628 + 1.0f;
      float _1631 = _1629 * _1494;
      float _1632 = _1630 * _1496;
      float _1633 = _1486 * 0.10000000149011612f;
      float _1634 = _1633 * cbRadialColor.x;
      float _1635 = _1633 * cbRadialColor.y;
      float _1636 = _1633 * cbRadialColor.z;
      if (_56) {
        float _1638 = _1542 + cbRadialScreenPos.x;
        float _1639 = _1543 + cbRadialScreenPos.y;
        float _1640 = dot(float2(_1638, _1639), float2(_1638, _1639));
        float _1641 = _1640 * _1449;
        float _1642 = _1641 + 1.0f;
        float _1643 = _1642 * _1454;
        float _1644 = _1643 * _1638;
        float _1645 = _1643 * _1639;
        float _1646 = _1644 + 0.5f;
        float _1647 = _1645 + 0.5f;
        float4 _1649 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1646, _1647), 0.0f);
        float _1653 = _1554 + cbRadialScreenPos.x;
        float _1654 = _1555 + cbRadialScreenPos.y;
        float _1655 = dot(float2(_1653, _1654), float2(_1653, _1654));
        float _1656 = _1655 * _1449;
        float _1657 = _1656 + 1.0f;
        float _1658 = _1653 * _1454;
        float _1659 = _1658 * _1657;
        float _1660 = _1654 * _1454;
        float _1661 = _1660 * _1657;
        float _1662 = _1659 + 0.5f;
        float _1663 = _1661 + 0.5f;
        float4 _1664 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1662, _1663), 0.0f);
        float _1668 = _1664.x + _1649.x;
        float _1669 = _1664.y + _1649.y;
        float _1670 = _1664.z + _1649.z;
        float _1671 = _1565 + cbRadialScreenPos.x;
        float _1672 = _1566 + cbRadialScreenPos.y;
        float _1673 = dot(float2(_1671, _1672), float2(_1671, _1672));
        float _1674 = _1673 * _1449;
        float _1675 = _1674 + 1.0f;
        float _1676 = _1671 * _1454;
        float _1677 = _1676 * _1675;
        float _1678 = _1672 * _1454;
        float _1679 = _1678 * _1675;
        float _1680 = _1677 + 0.5f;
        float _1681 = _1679 + 0.5f;
        float4 _1682 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1680, _1681), 0.0f);
        float _1686 = _1668 + _1682.x;
        float _1687 = _1669 + _1682.y;
        float _1688 = _1670 + _1682.z;
        float _1689 = _1576 + cbRadialScreenPos.x;
        float _1690 = _1577 + cbRadialScreenPos.y;
        float _1691 = dot(float2(_1689, _1690), float2(_1689, _1690));
        float _1692 = _1691 * _1449;
        float _1693 = _1692 + 1.0f;
        float _1694 = _1689 * _1454;
        float _1695 = _1694 * _1693;
        float _1696 = _1690 * _1454;
        float _1697 = _1696 * _1693;
        float _1698 = _1695 + 0.5f;
        float _1699 = _1697 + 0.5f;
        float4 _1700 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1698, _1699), 0.0f);
        float _1704 = _1686 + _1700.x;
        float _1705 = _1687 + _1700.y;
        float _1706 = _1688 + _1700.z;
        float _1707 = _1587 + cbRadialScreenPos.x;
        float _1708 = _1588 + cbRadialScreenPos.y;
        float _1709 = dot(float2(_1707, _1708), float2(_1707, _1708));
        float _1710 = _1709 * _1449;
        float _1711 = _1710 + 1.0f;
        float _1712 = _1707 * _1454;
        float _1713 = _1712 * _1711;
        float _1714 = _1708 * _1454;
        float _1715 = _1714 * _1711;
        float _1716 = _1713 + 0.5f;
        float _1717 = _1715 + 0.5f;
        float4 _1718 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1716, _1717), 0.0f);
        float _1722 = _1704 + _1718.x;
        float _1723 = _1705 + _1718.y;
        float _1724 = _1706 + _1718.z;
        float _1725 = _1598 + cbRadialScreenPos.x;
        float _1726 = _1599 + cbRadialScreenPos.y;
        float _1727 = dot(float2(_1725, _1726), float2(_1725, _1726));
        float _1728 = _1727 * _1449;
        float _1729 = _1728 + 1.0f;
        float _1730 = _1725 * _1454;
        float _1731 = _1730 * _1729;
        float _1732 = _1726 * _1454;
        float _1733 = _1732 * _1729;
        float _1734 = _1731 + 0.5f;
        float _1735 = _1733 + 0.5f;
        float4 _1736 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1734, _1735), 0.0f);
        float _1740 = _1722 + _1736.x;
        float _1741 = _1723 + _1736.y;
        float _1742 = _1724 + _1736.z;
        float _1743 = _1609 + cbRadialScreenPos.x;
        float _1744 = _1610 + cbRadialScreenPos.y;
        float _1745 = dot(float2(_1743, _1744), float2(_1743, _1744));
        float _1746 = _1745 * _1449;
        float _1747 = _1746 + 1.0f;
        float _1748 = _1743 * _1454;
        float _1749 = _1748 * _1747;
        float _1750 = _1744 * _1454;
        float _1751 = _1750 * _1747;
        float _1752 = _1749 + 0.5f;
        float _1753 = _1751 + 0.5f;
        float4 _1754 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1752, _1753), 0.0f);
        float _1758 = _1740 + _1754.x;
        float _1759 = _1741 + _1754.y;
        float _1760 = _1742 + _1754.z;
        float _1761 = _1620 + cbRadialScreenPos.x;
        float _1762 = _1621 + cbRadialScreenPos.y;
        float _1763 = dot(float2(_1761, _1762), float2(_1761, _1762));
        float _1764 = _1763 * _1449;
        float _1765 = _1764 + 1.0f;
        float _1766 = _1761 * _1454;
        float _1767 = _1766 * _1765;
        float _1768 = _1762 * _1454;
        float _1769 = _1768 * _1765;
        float _1770 = _1767 + 0.5f;
        float _1771 = _1769 + 0.5f;
        float4 _1772 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1770, _1771), 0.0f);
        float _1776 = _1758 + _1772.x;
        float _1777 = _1759 + _1772.y;
        float _1778 = _1760 + _1772.z;
        float _1779 = _1631 + cbRadialScreenPos.x;
        float _1780 = _1632 + cbRadialScreenPos.y;
        float _1781 = dot(float2(_1779, _1780), float2(_1779, _1780));
        float _1782 = _1781 * _1449;
        float _1783 = _1782 + 1.0f;
        float _1784 = _1779 * _1454;
        float _1785 = _1784 * _1783;
        float _1786 = _1780 * _1454;
        float _1787 = _1786 * _1783;
        float _1788 = _1785 + 0.5f;
        float _1789 = _1787 + 0.5f;
        float4 _1790 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1788, _1789), 0.0f);
        float _1794 = _1776 + _1790.x;
        float _1795 = _1777 + _1790.y;
        float _1796 = _1778 + _1790.z;
        float _1797 = _1634 * _1794;
        float _1798 = _1635 * _1795;
        float _1799 = _1636 * _1796;
        float _1800 = max(_1797, _1798);
        float _1801 = max(_1800, _1799);
        bool _1802 = isfinite(_1801);
        if (_1802) {
          float _1808 = invLinearBegin * _1797;
          bool _1809 = (_1797 >= linearBegin);
          float _1810 = _1808 * _1808;
          float _1811 = _1808 * 2.0f;
          float _1812 = 3.0f - _1811;
          float _1813 = _1810 * _1812;
          float _1814 = invLinearBegin * _1798;
          bool _1815 = (_1798 >= linearBegin);
          float _1816 = _1814 * _1814;
          float _1817 = _1814 * 2.0f;
          float _1818 = 3.0f - _1817;
          float _1819 = _1816 * _1818;
          float _1820 = invLinearBegin * _1799;
          bool _1821 = (_1799 >= linearBegin);
          float _1822 = _1820 * _1820;
          float _1823 = _1820 * 2.0f;
          float _1824 = 3.0f - _1823;
          float _1825 = _1822 * _1824;
          float _1826 = 1.0f - _1813;
          float _1827 = select(_1809, 0.0f, _1826);
          float _1828 = 1.0f - _1819;
          float _1829 = select(_1815, 0.0f, _1828);
          float _1830 = 1.0f - _1825;
          float _1831 = select(_1821, 0.0f, _1830);
          bool _1834 = (_1797 < linearStart);
          bool _1835 = (_1798 < linearStart);
          bool _1836 = (_1799 < linearStart);
          float _1837 = select(_1834, 0.0f, 1.0f);
          float _1838 = select(_1835, 0.0f, 1.0f);
          float _1839 = select(_1836, 0.0f, 1.0f);
          float _1840 = 1.0f - _1837;
          float _1841 = _1840 - _1827;
          float _1842 = 1.0f - _1838;
          float _1843 = _1842 - _1829;
          float _1844 = 1.0f - _1839;
          float _1845 = _1844 - _1831;
          float _1847 = log2(_1808);
          float _1848 = log2(_1814);
          float _1849 = log2(_1820);
          float _1850 = _1847 * toe;
          float _1851 = _1848 * toe;
          float _1852 = _1849 * toe;
          float _1853 = exp2(_1850);
          float _1854 = exp2(_1851);
          float _1855 = exp2(_1852);
          float _1856 = _1853 * _1827;
          float _1857 = _1856 * linearBegin;
          float _1858 = _1854 * _1829;
          float _1859 = _1858 * linearBegin;
          float _1860 = _1855 * _1831;
          float _1861 = _1860 * linearBegin;
          float _1863 = contrast * _1797;
          float _1864 = contrast * _1798;
          float _1865 = contrast * _1799;
          float _1867 = _1863 + madLinearStartContrastFactor;
          float _1868 = _1864 + madLinearStartContrastFactor;
          float _1869 = _1865 + madLinearStartContrastFactor;
          float _1870 = _1867 * _1841;
          float _1871 = _1868 * _1843;
          float _1872 = _1869 * _1845;
          float _1873 = _1870 + _1857;
          float _1874 = _1871 + _1859;
          float _1875 = _1872 + _1861;
          float _1879 = contrastFactor * _1797;
          float _1880 = contrastFactor * _1798;
          float _1881 = contrastFactor * _1799;
          float _1883 = _1879 + mulLinearStartContrastFactor;
          float _1884 = _1880 + mulLinearStartContrastFactor;
          float _1885 = _1881 + mulLinearStartContrastFactor;
          float _1886 = exp2(_1883);
          float _1887 = exp2(_1884);
          float _1888 = exp2(_1885);
          float _1889 = _1886 * displayMaxNitSubContrastFactor;
          float _1890 = _1887 * displayMaxNitSubContrastFactor;
          float _1891 = _1888 * displayMaxNitSubContrastFactor;
          float _1892 = maxNit - _1889;
          float _1893 = maxNit - _1890;
          float _1894 = maxNit - _1891;
          float _1895 = _1892 * _1837;
          float _1896 = _1893 * _1838;
          float _1897 = _1894 * _1839;
          float _1898 = _1873 + _1895;
          float _1899 = _1874 + _1896;
          float _1900 = _1875 + _1897;
          _1902 = _1898;
          _1903 = _1899;
          _1904 = _1900;
        } else {
          _1902 = 1.0f;
          _1903 = 1.0f;
          _1904 = 1.0f;
        }
        float _1905 = saturate(_1902);
        float _1906 = saturate(_1903);
        float _1907 = saturate(_1904);
        float _1908 = _1446 * 0.10000000149011612f;
        float _1909 = _1908 * cbRadialColor.x;
        float _1910 = _1447 * 0.10000000149011612f;
        float _1911 = _1910 * cbRadialColor.y;
        float _1912 = _1448 * 0.10000000149011612f;
        float _1913 = _1912 * cbRadialColor.z;
        float _1914 = _1905 + _1909;
        float _1915 = _1906 + _1911;
        float _1916 = _1907 + _1913;
        _2493 = _1914;
        _2494 = _1915;
        _2495 = _1916;
      } else {
        float _1918 = cbRadialScreenPos.x + 0.5f;
        float _1919 = _1918 + _1542;
        float _1920 = cbRadialScreenPos.y + 0.5f;
        float _1921 = _1920 + _1543;
        float _1922 = _1918 + _1554;
        float _1923 = _1920 + _1555;
        float _1924 = _1918 + _1565;
        float _1925 = _1920 + _1566;
        float _1926 = _1918 + _1576;
        float _1927 = _1920 + _1577;
        float _1928 = _1918 + _1587;
        float _1929 = _1920 + _1588;
        float _1930 = _1918 + _1598;
        float _1931 = _1920 + _1599;
        float _1932 = _1918 + _1609;
        float _1933 = _1920 + _1610;
        float _1934 = _1918 + _1620;
        float _1935 = _1920 + _1621;
        float _1936 = _1918 + _1631;
        float _1937 = _1920 + _1632;
        if (_58) {
          float _1939 = _1919 * 2.0f;
          float _1940 = _1921 * 2.0f;
          float _1941 = _1939 + -1.0f;
          float _1942 = _1940 + -1.0f;
          float _1943 = _1941 * _1941;
          float _1944 = _1943 + 1.0f;
          float _1945 = sqrt(_1944);
          float _1946 = 1.0f / _1945;
          float _1947 = _1946 + _1450;
          float _1948 = _1945 * _1452;
          float _1949 = _1948 * _1947;
          float _1950 = _1946 + -1.0f;
          float _1951 = _1950 * _1451;
          float _1952 = _1951 + 1.0f;
          float _1953 = _1453 * 0.5f;
          float _1954 = _1953 * _1949;
          float _1955 = _1954 * _1941;
          float _1956 = _1953 * _1952;
          float _1957 = _1956 * _1949;
          float _1958 = _1957 * _1942;
          float _1959 = _1955 + 0.5f;
          float _1960 = _1958 + 0.5f;
          float4 _1962 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1959, _1960), 0.0f);
          float _1966 = _1922 * 2.0f;
          float _1967 = _1923 * 2.0f;
          float _1968 = _1966 + -1.0f;
          float _1969 = _1967 + -1.0f;
          float _1970 = _1968 * _1968;
          float _1971 = _1970 + 1.0f;
          float _1972 = sqrt(_1971);
          float _1973 = 1.0f / _1972;
          float _1974 = _1973 + _1450;
          float _1975 = _1972 * _1452;
          float _1976 = _1975 * _1974;
          float _1977 = _1973 + -1.0f;
          float _1978 = _1977 * _1451;
          float _1979 = _1978 + 1.0f;
          float _1980 = _1953 * _1968;
          float _1981 = _1980 * _1976;
          float _1982 = _1953 * _1969;
          float _1983 = _1982 * _1979;
          float _1984 = _1983 * _1976;
          float _1985 = _1981 + 0.5f;
          float _1986 = _1984 + 0.5f;
          float4 _1987 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1985, _1986), 0.0f);
          float _1991 = _1987.x + _1962.x;
          float _1992 = _1987.y + _1962.y;
          float _1993 = _1987.z + _1962.z;
          float _1994 = _1924 * 2.0f;
          float _1995 = _1925 * 2.0f;
          float _1996 = _1994 + -1.0f;
          float _1997 = _1995 + -1.0f;
          float _1998 = _1996 * _1996;
          float _1999 = _1998 + 1.0f;
          float _2000 = sqrt(_1999);
          float _2001 = 1.0f / _2000;
          float _2002 = _2001 + _1450;
          float _2003 = _2000 * _1452;
          float _2004 = _2003 * _2002;
          float _2005 = _2001 + -1.0f;
          float _2006 = _2005 * _1451;
          float _2007 = _2006 + 1.0f;
          float _2008 = _1953 * _1996;
          float _2009 = _2008 * _2004;
          float _2010 = _1953 * _1997;
          float _2011 = _2010 * _2007;
          float _2012 = _2011 * _2004;
          float _2013 = _2009 + 0.5f;
          float _2014 = _2012 + 0.5f;
          float4 _2015 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2013, _2014), 0.0f);
          float _2019 = _1991 + _2015.x;
          float _2020 = _1992 + _2015.y;
          float _2021 = _1993 + _2015.z;
          float _2022 = _1926 * 2.0f;
          float _2023 = _1927 * 2.0f;
          float _2024 = _2022 + -1.0f;
          float _2025 = _2023 + -1.0f;
          float _2026 = _2024 * _2024;
          float _2027 = _2026 + 1.0f;
          float _2028 = sqrt(_2027);
          float _2029 = 1.0f / _2028;
          float _2030 = _2029 + _1450;
          float _2031 = _2028 * _1452;
          float _2032 = _2031 * _2030;
          float _2033 = _2029 + -1.0f;
          float _2034 = _2033 * _1451;
          float _2035 = _2034 + 1.0f;
          float _2036 = _1953 * _2024;
          float _2037 = _2036 * _2032;
          float _2038 = _1953 * _2025;
          float _2039 = _2038 * _2035;
          float _2040 = _2039 * _2032;
          float _2041 = _2037 + 0.5f;
          float _2042 = _2040 + 0.5f;
          float4 _2043 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2041, _2042), 0.0f);
          float _2047 = _2019 + _2043.x;
          float _2048 = _2020 + _2043.y;
          float _2049 = _2021 + _2043.z;
          float _2050 = _1928 * 2.0f;
          float _2051 = _1929 * 2.0f;
          float _2052 = _2050 + -1.0f;
          float _2053 = _2051 + -1.0f;
          float _2054 = _2052 * _2052;
          float _2055 = _2054 + 1.0f;
          float _2056 = sqrt(_2055);
          float _2057 = 1.0f / _2056;
          float _2058 = _2057 + _1450;
          float _2059 = _2056 * _1452;
          float _2060 = _2059 * _2058;
          float _2061 = _2057 + -1.0f;
          float _2062 = _2061 * _1451;
          float _2063 = _2062 + 1.0f;
          float _2064 = _1953 * _2052;
          float _2065 = _2064 * _2060;
          float _2066 = _1953 * _2053;
          float _2067 = _2066 * _2063;
          float _2068 = _2067 * _2060;
          float _2069 = _2065 + 0.5f;
          float _2070 = _2068 + 0.5f;
          float4 _2071 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2069, _2070), 0.0f);
          float _2075 = _2047 + _2071.x;
          float _2076 = _2048 + _2071.y;
          float _2077 = _2049 + _2071.z;
          float _2078 = _1930 * 2.0f;
          float _2079 = _1931 * 2.0f;
          float _2080 = _2078 + -1.0f;
          float _2081 = _2079 + -1.0f;
          float _2082 = _2080 * _2080;
          float _2083 = _2082 + 1.0f;
          float _2084 = sqrt(_2083);
          float _2085 = 1.0f / _2084;
          float _2086 = _2085 + _1450;
          float _2087 = _2084 * _1452;
          float _2088 = _2087 * _2086;
          float _2089 = _2085 + -1.0f;
          float _2090 = _2089 * _1451;
          float _2091 = _2090 + 1.0f;
          float _2092 = _1953 * _2080;
          float _2093 = _2092 * _2088;
          float _2094 = _1953 * _2081;
          float _2095 = _2094 * _2091;
          float _2096 = _2095 * _2088;
          float _2097 = _2093 + 0.5f;
          float _2098 = _2096 + 0.5f;
          float4 _2099 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2097, _2098), 0.0f);
          float _2103 = _2075 + _2099.x;
          float _2104 = _2076 + _2099.y;
          float _2105 = _2077 + _2099.z;
          float _2106 = _1932 * 2.0f;
          float _2107 = _1933 * 2.0f;
          float _2108 = _2106 + -1.0f;
          float _2109 = _2107 + -1.0f;
          float _2110 = _2108 * _2108;
          float _2111 = _2110 + 1.0f;
          float _2112 = sqrt(_2111);
          float _2113 = 1.0f / _2112;
          float _2114 = _2113 + _1450;
          float _2115 = _2112 * _1452;
          float _2116 = _2115 * _2114;
          float _2117 = _2113 + -1.0f;
          float _2118 = _2117 * _1451;
          float _2119 = _2118 + 1.0f;
          float _2120 = _1953 * _2108;
          float _2121 = _2120 * _2116;
          float _2122 = _1953 * _2109;
          float _2123 = _2122 * _2119;
          float _2124 = _2123 * _2116;
          float _2125 = _2121 + 0.5f;
          float _2126 = _2124 + 0.5f;
          float4 _2127 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2125, _2126), 0.0f);
          float _2131 = _2103 + _2127.x;
          float _2132 = _2104 + _2127.y;
          float _2133 = _2105 + _2127.z;
          float _2134 = _1934 * 2.0f;
          float _2135 = _1935 * 2.0f;
          float _2136 = _2134 + -1.0f;
          float _2137 = _2135 + -1.0f;
          float _2138 = _2136 * _2136;
          float _2139 = _2138 + 1.0f;
          float _2140 = sqrt(_2139);
          float _2141 = 1.0f / _2140;
          float _2142 = _2141 + _1450;
          float _2143 = _2140 * _1452;
          float _2144 = _2143 * _2142;
          float _2145 = _2141 + -1.0f;
          float _2146 = _2145 * _1451;
          float _2147 = _2146 + 1.0f;
          float _2148 = _1953 * _2136;
          float _2149 = _2148 * _2144;
          float _2150 = _1953 * _2137;
          float _2151 = _2150 * _2147;
          float _2152 = _2151 * _2144;
          float _2153 = _2149 + 0.5f;
          float _2154 = _2152 + 0.5f;
          float4 _2155 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2153, _2154), 0.0f);
          float _2159 = _2131 + _2155.x;
          float _2160 = _2132 + _2155.y;
          float _2161 = _2133 + _2155.z;
          float _2162 = _1936 * 2.0f;
          float _2163 = _1937 * 2.0f;
          float _2164 = _2162 + -1.0f;
          float _2165 = _2163 + -1.0f;
          float _2166 = _2164 * _2164;
          float _2167 = _2166 + 1.0f;
          float _2168 = sqrt(_2167);
          float _2169 = 1.0f / _2168;
          float _2170 = _2169 + _1450;
          float _2171 = _2168 * _1452;
          float _2172 = _2171 * _2170;
          float _2173 = _2169 + -1.0f;
          float _2174 = _2173 * _1451;
          float _2175 = _2174 + 1.0f;
          float _2176 = _1953 * _2164;
          float _2177 = _2176 * _2172;
          float _2178 = _1953 * _2165;
          float _2179 = _2178 * _2175;
          float _2180 = _2179 * _2172;
          float _2181 = _2177 + 0.5f;
          float _2182 = _2180 + 0.5f;
          float4 _2183 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2181, _2182), 0.0f);
          float _2187 = _2159 + _2183.x;
          float _2188 = _2160 + _2183.y;
          float _2189 = _2161 + _2183.z;
          float _2190 = _1634 * _2187;
          float _2191 = _1635 * _2188;
          float _2192 = _1636 * _2189;
          float _2193 = max(_2190, _2191);
          float _2194 = max(_2193, _2192);
          bool _2195 = isfinite(_2194);
          if (_2195) {
            float _2201 = invLinearBegin * _2190;
            bool _2202 = (_2190 >= linearBegin);
            float _2203 = _2201 * _2201;
            float _2204 = _2201 * 2.0f;
            float _2205 = 3.0f - _2204;
            float _2206 = _2203 * _2205;
            float _2207 = invLinearBegin * _2191;
            bool _2208 = (_2191 >= linearBegin);
            float _2209 = _2207 * _2207;
            float _2210 = _2207 * 2.0f;
            float _2211 = 3.0f - _2210;
            float _2212 = _2209 * _2211;
            float _2213 = invLinearBegin * _2192;
            bool _2214 = (_2192 >= linearBegin);
            float _2215 = _2213 * _2213;
            float _2216 = _2213 * 2.0f;
            float _2217 = 3.0f - _2216;
            float _2218 = _2215 * _2217;
            float _2219 = 1.0f - _2206;
            float _2220 = select(_2202, 0.0f, _2219);
            float _2221 = 1.0f - _2212;
            float _2222 = select(_2208, 0.0f, _2221);
            float _2223 = 1.0f - _2218;
            float _2224 = select(_2214, 0.0f, _2223);
            bool _2227 = (_2190 < linearStart);
            bool _2228 = (_2191 < linearStart);
            bool _2229 = (_2192 < linearStart);
            float _2230 = select(_2227, 0.0f, 1.0f);
            float _2231 = select(_2228, 0.0f, 1.0f);
            float _2232 = select(_2229, 0.0f, 1.0f);
            float _2233 = 1.0f - _2230;
            float _2234 = _2233 - _2220;
            float _2235 = 1.0f - _2231;
            float _2236 = _2235 - _2222;
            float _2237 = 1.0f - _2232;
            float _2238 = _2237 - _2224;
            float _2240 = log2(_2201);
            float _2241 = log2(_2207);
            float _2242 = log2(_2213);
            float _2243 = _2240 * toe;
            float _2244 = _2241 * toe;
            float _2245 = _2242 * toe;
            float _2246 = exp2(_2243);
            float _2247 = exp2(_2244);
            float _2248 = exp2(_2245);
            float _2249 = _2246 * _2220;
            float _2250 = _2249 * linearBegin;
            float _2251 = _2247 * _2222;
            float _2252 = _2251 * linearBegin;
            float _2253 = _2248 * _2224;
            float _2254 = _2253 * linearBegin;
            float _2256 = contrast * _2190;
            float _2257 = contrast * _2191;
            float _2258 = contrast * _2192;
            float _2260 = _2256 + madLinearStartContrastFactor;
            float _2261 = _2257 + madLinearStartContrastFactor;
            float _2262 = _2258 + madLinearStartContrastFactor;
            float _2263 = _2260 * _2234;
            float _2264 = _2261 * _2236;
            float _2265 = _2262 * _2238;
            float _2266 = _2263 + _2250;
            float _2267 = _2264 + _2252;
            float _2268 = _2265 + _2254;
            float _2272 = contrastFactor * _2190;
            float _2273 = contrastFactor * _2191;
            float _2274 = contrastFactor * _2192;
            float _2276 = _2272 + mulLinearStartContrastFactor;
            float _2277 = _2273 + mulLinearStartContrastFactor;
            float _2278 = _2274 + mulLinearStartContrastFactor;
            float _2279 = exp2(_2276);
            float _2280 = exp2(_2277);
            float _2281 = exp2(_2278);
            float _2282 = _2279 * displayMaxNitSubContrastFactor;
            float _2283 = _2280 * displayMaxNitSubContrastFactor;
            float _2284 = _2281 * displayMaxNitSubContrastFactor;
            float _2285 = maxNit - _2282;
            float _2286 = maxNit - _2283;
            float _2287 = maxNit - _2284;
            float _2288 = _2285 * _2230;
            float _2289 = _2286 * _2231;
            float _2290 = _2287 * _2232;
            float _2291 = _2266 + _2288;
            float _2292 = _2267 + _2289;
            float _2293 = _2268 + _2290;
            _2295 = _2291;
            _2296 = _2292;
            _2297 = _2293;
          } else {
            _2295 = 1.0f;
            _2296 = 1.0f;
            _2297 = 1.0f;
          }
          float _2298 = saturate(_2295);
          float _2299 = saturate(_2296);
          float _2300 = saturate(_2297);
          float _2301 = _1446 * 0.10000000149011612f;
          float _2302 = _2301 * cbRadialColor.x;
          float _2303 = _1447 * 0.10000000149011612f;
          float _2304 = _2303 * cbRadialColor.y;
          float _2305 = _1448 * 0.10000000149011612f;
          float _2306 = _2305 * cbRadialColor.z;
          float _2307 = _2298 + _2302;
          float _2308 = _2299 + _2304;
          float _2309 = _2300 + _2306;
          _2493 = _2307;
          _2494 = _2308;
          _2495 = _2309;
        } else {
          float4 _2312 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1919, _1921), 0.0f);
          float4 _2316 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1922, _1923), 0.0f);
          float _2320 = _2316.x + _2312.x;
          float _2321 = _2316.y + _2312.y;
          float _2322 = _2316.z + _2312.z;
          float4 _2323 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1924, _1925), 0.0f);
          float _2327 = _2320 + _2323.x;
          float _2328 = _2321 + _2323.y;
          float _2329 = _2322 + _2323.z;
          float4 _2330 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1926, _1927), 0.0f);
          float _2334 = _2327 + _2330.x;
          float _2335 = _2328 + _2330.y;
          float _2336 = _2329 + _2330.z;
          float4 _2337 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1928, _1929), 0.0f);
          float _2341 = _2334 + _2337.x;
          float _2342 = _2335 + _2337.y;
          float _2343 = _2336 + _2337.z;
          float4 _2344 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1930, _1931), 0.0f);
          float _2348 = _2341 + _2344.x;
          float _2349 = _2342 + _2344.y;
          float _2350 = _2343 + _2344.z;
          float4 _2351 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1932, _1933), 0.0f);
          float _2355 = _2348 + _2351.x;
          float _2356 = _2349 + _2351.y;
          float _2357 = _2350 + _2351.z;
          float4 _2358 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1934, _1935), 0.0f);
          float _2362 = _2355 + _2358.x;
          float _2363 = _2356 + _2358.y;
          float _2364 = _2357 + _2358.z;
          float4 _2365 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1936, _1937), 0.0f);
          float _2369 = _2362 + _2365.x;
          float _2370 = _2363 + _2365.y;
          float _2371 = _2364 + _2365.z;
          float _2372 = _1634 * _2369;
          float _2373 = _1635 * _2370;
          float _2374 = _1636 * _2371;
          float _2375 = max(_2372, _2373);
          float _2376 = max(_2375, _2374);
          bool _2377 = isfinite(_2376);
          if (_2377) {
            float _2383 = invLinearBegin * _2372;
            bool _2384 = (_2372 >= linearBegin);
            float _2385 = _2383 * _2383;
            float _2386 = _2383 * 2.0f;
            float _2387 = 3.0f - _2386;
            float _2388 = _2385 * _2387;
            float _2389 = invLinearBegin * _2373;
            bool _2390 = (_2373 >= linearBegin);
            float _2391 = _2389 * _2389;
            float _2392 = _2389 * 2.0f;
            float _2393 = 3.0f - _2392;
            float _2394 = _2391 * _2393;
            float _2395 = invLinearBegin * _2374;
            bool _2396 = (_2374 >= linearBegin);
            float _2397 = _2395 * _2395;
            float _2398 = _2395 * 2.0f;
            float _2399 = 3.0f - _2398;
            float _2400 = _2397 * _2399;
            float _2401 = 1.0f - _2388;
            float _2402 = select(_2384, 0.0f, _2401);
            float _2403 = 1.0f - _2394;
            float _2404 = select(_2390, 0.0f, _2403);
            float _2405 = 1.0f - _2400;
            float _2406 = select(_2396, 0.0f, _2405);
            bool _2409 = (_2372 < linearStart);
            bool _2410 = (_2373 < linearStart);
            bool _2411 = (_2374 < linearStart);
            float _2412 = select(_2409, 0.0f, 1.0f);
            float _2413 = select(_2410, 0.0f, 1.0f);
            float _2414 = select(_2411, 0.0f, 1.0f);
            float _2415 = 1.0f - _2412;
            float _2416 = _2415 - _2402;
            float _2417 = 1.0f - _2413;
            float _2418 = _2417 - _2404;
            float _2419 = 1.0f - _2414;
            float _2420 = _2419 - _2406;
            float _2422 = log2(_2383);
            float _2423 = log2(_2389);
            float _2424 = log2(_2395);
            float _2425 = _2422 * toe;
            float _2426 = _2423 * toe;
            float _2427 = _2424 * toe;
            float _2428 = exp2(_2425);
            float _2429 = exp2(_2426);
            float _2430 = exp2(_2427);
            float _2431 = _2428 * _2402;
            float _2432 = _2431 * linearBegin;
            float _2433 = _2429 * _2404;
            float _2434 = _2433 * linearBegin;
            float _2435 = _2430 * _2406;
            float _2436 = _2435 * linearBegin;
            float _2438 = contrast * _2372;
            float _2439 = contrast * _2373;
            float _2440 = contrast * _2374;
            float _2442 = _2438 + madLinearStartContrastFactor;
            float _2443 = _2439 + madLinearStartContrastFactor;
            float _2444 = _2440 + madLinearStartContrastFactor;
            float _2445 = _2442 * _2416;
            float _2446 = _2443 * _2418;
            float _2447 = _2444 * _2420;
            float _2448 = _2445 + _2432;
            float _2449 = _2446 + _2434;
            float _2450 = _2447 + _2436;
            float _2454 = contrastFactor * _2372;
            float _2455 = contrastFactor * _2373;
            float _2456 = contrastFactor * _2374;
            float _2458 = _2454 + mulLinearStartContrastFactor;
            float _2459 = _2455 + mulLinearStartContrastFactor;
            float _2460 = _2456 + mulLinearStartContrastFactor;
            float _2461 = exp2(_2458);
            float _2462 = exp2(_2459);
            float _2463 = exp2(_2460);
            float _2464 = _2461 * displayMaxNitSubContrastFactor;
            float _2465 = _2462 * displayMaxNitSubContrastFactor;
            float _2466 = _2463 * displayMaxNitSubContrastFactor;
            float _2467 = maxNit - _2464;
            float _2468 = maxNit - _2465;
            float _2469 = maxNit - _2466;
            float _2470 = _2467 * _2412;
            float _2471 = _2468 * _2413;
            float _2472 = _2469 * _2414;
            float _2473 = _2448 + _2470;
            float _2474 = _2449 + _2471;
            float _2475 = _2450 + _2472;
            _2477 = _2473;
            _2478 = _2474;
            _2479 = _2475;
          } else {
            _2477 = 1.0f;
            _2478 = 1.0f;
            _2479 = 1.0f;
          }
          float _2480 = saturate(_2477);
          float _2481 = saturate(_2478);
          float _2482 = saturate(_2479);
          float _2483 = _1446 * 0.10000000149011612f;
          float _2484 = _2483 * cbRadialColor.x;
          float _2485 = _1447 * 0.10000000149011612f;
          float _2486 = _2485 * cbRadialColor.y;
          float _2487 = _1448 * 0.10000000149011612f;
          float _2488 = _2487 * cbRadialColor.z;
          float _2489 = _2480 + _2484;
          float _2490 = _2481 + _2486;
          float _2491 = _2482 + _2488;
          _2493 = _2489;
          _2494 = _2490;
          _2495 = _2491;
        }
      }
      bool _2496 = (cbRadialMaskRate.x > 0.0f);
      if (_2496) {
        float _2498 = _1494 * _1494;
        float _2499 = _1496 * _1496;
        float _2500 = _2498 + _2499;
        float _2501 = sqrt(_2500);
        float _2502 = _2501 * cbRadialMaskSmoothstep.x;
        float _2503 = _2502 + cbRadialMaskSmoothstep.y;
        float _2504 = saturate(_2503);
        float _2505 = _2504 * 2.0f;
        float _2506 = 3.0f - _2505;
        float _2507 = _2504 * _2504;
        float _2508 = _2507 * cbRadialMaskRate.x;
        float _2509 = _2508 * _2506;
        float _2510 = _2509 + cbRadialMaskRate.y;
        float _2511 = _2493 - _1446;
        float _2512 = _2494 - _1447;
        float _2513 = _2495 - _1448;
        float _2514 = _2510 * _2511;
        float _2515 = _2510 * _2512;
        float _2516 = _2510 * _2513;
        float _2517 = _2514 + _1446;
        float _2518 = _2515 + _1447;
        float _2519 = _2516 + _1448;
        _2521 = _2517;
        _2522 = _2518;
        _2523 = _2519;
      } else {
        _2521 = _2493;
        _2522 = _2494;
        _2523 = _2495;
      }
      float _2524 = _2521 - _1446;
      float _2525 = _2522 - _1447;
      float _2526 = _2523 - _1448;
      float _2527 = _2524 * _1483;
      float _2528 = _2525 * _1483;
      float _2529 = _2526 * _1483;
      float _2530 = _2527 + _1446;
      float _2531 = _2528 + _1447;
      float _2532 = _2529 + _1448;
      _2534 = _2530;
      _2535 = _2531;
      _2536 = _2532;
    } else {
      _2534 = _1446;
      _2535 = _1447;
      _2536 = _1448;
    }
  } else {
    _2534 = _1446;
    _2535 = _1447;
    _2536 = _1448;
  }
  int _2537 = (uint)(cPassEnabled) & 2;
  bool _2538 = (_2537 == 0);
  if (!_2538) {
    float _2553 = screenSize.x * fNoiseUVOffset.x;
    float _2554 = screenSize.y * fNoiseUVOffset.y;
    float _2555 = _2553 + SV_Position.x;
    float _2556 = _2554 + SV_Position.y;
    float _2557 = _2555 * fReverseNoiseSize;
    float _2558 = floor(_2557);
    float _2559 = _2556 * fReverseNoiseSize;
    float _2560 = floor(_2559);
    float _2561 = dot(float2(_2558, _2560), float2(0.0671105608344078f, 0.005837149918079376f));
    float _2562 = frac(_2561);
    float _2563 = _2562 * 52.98291778564453f;
    float _2564 = frac(_2563);
    bool _2565 = (_2564 < fNoiseDensity);
    if (_2565) {
      float _2567 = _2560 * _2558;
      uint _2568 = uint(_2567);
      int _2569 = _2568 ^ 12345391;
      uint _2570 = _2569 * 3635641;
      uint _2571 = _2569 * 232681024;
      int _2572 = (uint)(_2570) >> 26;
      int _2573 = _2572 | _2571;
      int _2574 = _2573 ^ _2570;
      float _2575 = float((uint)_2574);
      float _2576 = _2575 * 2.3283064365386963e-10f;
      _2578 = _2576;
    } else {
      _2578 = 0.0f;
    }
    float _2579 = _2564 * 757.4846801757812f;
    float _2580 = frac(_2579);
    bool _2581 = (_2580 < fNoiseDensity);
    if (_2581) {
      int _2583 = asint(_2580);
      int _2584 = _2583 ^ 12345391;
      uint _2585 = _2584 * 3635641;
      uint _2586 = _2584 * 232681024;
      int _2587 = (uint)(_2585) >> 26;
      int _2588 = _2587 | _2586;
      int _2589 = _2588 ^ _2585;
      float _2590 = float((uint)_2589);
      float _2591 = _2590 * 2.3283064365386963e-10f;
      float _2592 = _2591 + -0.5f;
      _2594 = _2592;
    } else {
      _2594 = 0.0f;
    }
    float _2595 = _2580 * 757.4846801757812f;
    float _2596 = frac(_2595);
    bool _2597 = (_2596 < fNoiseDensity);
    if (_2597) {
      int _2599 = asint(_2596);
      int _2600 = _2599 ^ 12345391;
      uint _2601 = _2600 * 3635641;
      uint _2602 = _2600 * 232681024;
      int _2603 = (uint)(_2601) >> 26;
      int _2604 = _2603 | _2602;
      int _2605 = _2604 ^ _2601;
      float _2606 = float((uint)_2605);
      float _2607 = _2606 * 2.3283064365386963e-10f;
      float _2608 = _2607 + -0.5f;
      _2610 = _2608;
    } else {
      _2610 = 0.0f;
    }
    float _2611 = _2578 * fNoisePower.x;
    float _2612 = _2610 * fNoisePower.y;
    float _2613 = _2594 * fNoisePower.y;
    float _2614 = mad(_2613, 1.4019999504089355f, _2611);
    float _2615 = mad(_2612, -0.3440000116825104f, _2611);
    float _2616 = mad(_2613, -0.7139999866485596f, _2615);
    float _2617 = mad(_2612, 1.7719999551773071f, _2611);
    float _2618 = saturate(_2534);
    float _2619 = saturate(_2535);
    float _2620 = saturate(_2536);
    float _2621 = dot(float3(_2618, _2619, _2620), float3(0.29899999499320984f, -0.16899999976158142f, 0.5f));
    float _2622 = saturate(_2621);
    float _2623 = 1.0f - _2622;
    float _2624 = log2(_2623);
    float _2625 = _2624 * fNoiseContrast;
    float _2626 = exp2(_2625);
    float _2627 = _2626 * fBlendRate;
    float _2628 = _2614 - _2534;
    float _2629 = _2616 - _2535;
    float _2630 = _2617 - _2536;
    float _2631 = _2627 * _2628;
    float _2632 = _2627 * _2629;
    float _2633 = _2627 * _2630;
    float _2634 = _2631 + _2534;
    float _2635 = _2632 + _2535;
    float _2636 = _2633 + _2536;
    _2638 = _2634;
    _2639 = _2635;
    _2640 = _2636;
  } else {
    _2638 = _2534;
    _2639 = _2535;
    _2640 = _2536;
  }
  int _2641 = (uint)(cPassEnabled) & 4;
  bool _2642 = (_2641 == 0);
  if (!_2642) {
    float _2664 = saturate(_2638);
    float _2665 = saturate(_2639);
    float _2666 = saturate(_2640);
    float _2667 = fTextureInverseSize * 0.5f;
    bool _2668 = !(_2664 <= 0.0031308000907301903f);
    [branch]
    if (!_2668) {
      float _2670 = _2664 * 12.920000076293945f;
      _2678 = _2670;
    } else {
      float _2672 = log2(_2664);
      float _2673 = _2672 * 0.4166666567325592f;
      float _2674 = exp2(_2673);
      float _2675 = _2674 * 1.0549999475479126f;
      float _2676 = _2675 + -0.054999999701976776f;
      _2678 = _2676;
    }
    bool _2679 = !(_2665 <= 0.0031308000907301903f);
    [branch]
    if (!_2679) {
      float _2681 = _2665 * 12.920000076293945f;
      _2689 = _2681;
    } else {
      float _2683 = log2(_2665);
      float _2684 = _2683 * 0.4166666567325592f;
      float _2685 = exp2(_2684);
      float _2686 = _2685 * 1.0549999475479126f;
      float _2687 = _2686 + -0.054999999701976776f;
      _2689 = _2687;
    }
    bool _2690 = !(_2666 <= 0.0031308000907301903f);
    [branch]
    if (!_2690) {
      float _2692 = _2666 * 12.920000076293945f;
      _2700 = _2692;
    } else {
      float _2694 = log2(_2666);
      float _2695 = _2694 * 0.4166666567325592f;
      float _2696 = exp2(_2695);
      float _2697 = _2696 * 1.0549999475479126f;
      float _2698 = _2697 + -0.054999999701976776f;
      _2700 = _2698;
    }
    float _2701 = 1.0f - fTextureInverseSize;
    float _2702 = _2678 * _2701;
    float _2703 = _2689 * _2701;
    float _2704 = _2700 * _2701;
    float _2705 = _2702 + _2667;
    float _2706 = _2703 + _2667;
    float _2707 = _2704 + _2667;
    bool _2708 = (fTextureBlendRate > 0.0f);
    bool _2709 = (fTextureBlendRate2 > 0.0f);
    bool _2710 = _2708 && _2709;
    [branch]
    if (_2710) {
      float4 _2714 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2705, _2706, _2707), 0.0f);
      float4 _2719 = tTextureMap1.SampleLevel(TrilinearClamp, float3(_2705, _2706, _2707), 0.0f);
      float _2723 = _2719.x - _2714.x;
      float _2724 = _2719.y - _2714.y;
      float _2725 = _2719.z - _2714.z;
      float _2726 = _2723 * fTextureBlendRate;
      float _2727 = _2724 * fTextureBlendRate;
      float _2728 = _2725 * fTextureBlendRate;
      float _2729 = _2726 + _2714.x;
      float _2730 = _2727 + _2714.y;
      float _2731 = _2728 + _2714.z;
      bool _2732 = !(_2729 <= 0.0031308000907301903f);
      [branch]
      if (!_2732) {
        float _2734 = _2729 * 12.920000076293945f;
        _2742 = _2734;
      } else {
        float _2736 = log2(_2729);
        float _2737 = _2736 * 0.4166666567325592f;
        float _2738 = exp2(_2737);
        float _2739 = _2738 * 1.0549999475479126f;
        float _2740 = _2739 + -0.054999999701976776f;
        _2742 = _2740;
      }
      bool _2743 = !(_2730 <= 0.0031308000907301903f);
      [branch]
      if (!_2743) {
        float _2745 = _2730 * 12.920000076293945f;
        _2753 = _2745;
      } else {
        float _2747 = log2(_2730);
        float _2748 = _2747 * 0.4166666567325592f;
        float _2749 = exp2(_2748);
        float _2750 = _2749 * 1.0549999475479126f;
        float _2751 = _2750 + -0.054999999701976776f;
        _2753 = _2751;
      }
      bool _2754 = !(_2731 <= 0.0031308000907301903f);
      [branch]
      if (!_2754) {
        float _2756 = _2731 * 12.920000076293945f;
        _2764 = _2756;
      } else {
        float _2758 = log2(_2731);
        float _2759 = _2758 * 0.4166666567325592f;
        float _2760 = exp2(_2759);
        float _2761 = _2760 * 1.0549999475479126f;
        float _2762 = _2761 + -0.054999999701976776f;
        _2764 = _2762;
      }
      float4 _2766 = tTextureMap2.SampleLevel(TrilinearClamp, float3(_2742, _2753, _2764), 0.0f);
      float _2770 = _2766.x - _2729;
      float _2771 = _2766.y - _2730;
      float _2772 = _2766.z - _2731;
      float _2773 = _2770 * fTextureBlendRate2;
      float _2774 = _2771 * fTextureBlendRate2;
      float _2775 = _2772 * fTextureBlendRate2;
      float _2776 = _2773 + _2729;
      float _2777 = _2774 + _2730;
      float _2778 = _2775 + _2731;
      _2858 = _2776;
      _2859 = _2777;
      _2860 = _2778;
    } else {
      if (_2708) {
        float4 _2781 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2705, _2706, _2707), 0.0f);
        float4 _2786 = tTextureMap1.SampleLevel(TrilinearClamp, float3(_2705, _2706, _2707), 0.0f);
        float _2790 = _2786.x - _2781.x;
        float _2791 = _2786.y - _2781.y;
        float _2792 = _2786.z - _2781.z;
        float _2793 = _2790 * fTextureBlendRate;
        float _2794 = _2791 * fTextureBlendRate;
        float _2795 = _2792 * fTextureBlendRate;
        float _2796 = _2793 + _2781.x;
        float _2797 = _2794 + _2781.y;
        float _2798 = _2795 + _2781.z;
        _2858 = _2796;
        _2859 = _2797;
        _2860 = _2798;
      } else {
        if (_2709) {
          float4 _2801 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2705, _2706, _2707), 0.0f);
          bool _2805 = !(_2801.x <= 0.0031308000907301903f);
          [branch]
          if (!_2805) {
            float _2807 = _2801.x * 12.920000076293945f;
            _2815 = _2807;
          } else {
            float _2809 = log2(_2801.x);
            float _2810 = _2809 * 0.4166666567325592f;
            float _2811 = exp2(_2810);
            float _2812 = _2811 * 1.0549999475479126f;
            float _2813 = _2812 + -0.054999999701976776f;
            _2815 = _2813;
          }
          bool _2816 = !(_2801.y <= 0.0031308000907301903f);
          [branch]
          if (!_2816) {
            float _2818 = _2801.y * 12.920000076293945f;
            _2826 = _2818;
          } else {
            float _2820 = log2(_2801.y);
            float _2821 = _2820 * 0.4166666567325592f;
            float _2822 = exp2(_2821);
            float _2823 = _2822 * 1.0549999475479126f;
            float _2824 = _2823 + -0.054999999701976776f;
            _2826 = _2824;
          }
          bool _2827 = !(_2801.z <= 0.0031308000907301903f);
          [branch]
          if (!_2827) {
            float _2829 = _2801.z * 12.920000076293945f;
            _2837 = _2829;
          } else {
            float _2831 = log2(_2801.z);
            float _2832 = _2831 * 0.4166666567325592f;
            float _2833 = exp2(_2832);
            float _2834 = _2833 * 1.0549999475479126f;
            float _2835 = _2834 + -0.054999999701976776f;
            _2837 = _2835;
          }
          float4 _2839 = tTextureMap2.SampleLevel(TrilinearClamp, float3(_2815, _2826, _2837), 0.0f);
          float _2843 = _2839.x - _2801.x;
          float _2844 = _2839.y - _2801.y;
          float _2845 = _2839.z - _2801.z;
          float _2846 = _2843 * fTextureBlendRate2;
          float _2847 = _2844 * fTextureBlendRate2;
          float _2848 = _2845 * fTextureBlendRate2;
          float _2849 = _2846 + _2801.x;
          float _2850 = _2847 + _2801.y;
          float _2851 = _2848 + _2801.z;
          _2858 = _2849;
          _2859 = _2850;
          _2860 = _2851;
        } else {
          float4 _2853 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2705, _2706, _2707), 0.0f);
          _2858 = _2853.x;
          _2859 = _2853.y;
          _2860 = _2853.z;
        }
      }
    }
    float _2861 = _2858 * (fColorMatrix[0].x);
    float _2862 = mad(_2859, (fColorMatrix[1].x), _2861);
    float _2863 = mad(_2860, (fColorMatrix[2].x), _2862);
    float _2864 = _2863 + (fColorMatrix[3].x);
    float _2865 = _2858 * (fColorMatrix[0].y);
    float _2866 = mad(_2859, (fColorMatrix[1].y), _2865);
    float _2867 = mad(_2860, (fColorMatrix[2].y), _2866);
    float _2868 = _2867 + (fColorMatrix[3].y);
    float _2869 = _2858 * (fColorMatrix[0].z);
    float _2870 = mad(_2859, (fColorMatrix[1].z), _2869);
    float _2871 = mad(_2860, (fColorMatrix[2].z), _2870);
    float _2872 = _2871 + (fColorMatrix[3].z);
    _2874 = _2864;
    _2875 = _2868;
    _2876 = _2872;
  } else {
    _2874 = _2638;
    _2875 = _2639;
    _2876 = _2640;
  }
  int _2877 = (uint)(cPassEnabled) & 8;
  bool _2878 = (_2877 == 0);
  if (!_2878) {
    float _2892 = cvdR.x * _2874;
    float _2893 = cvdR.y * _2875;
    float _2894 = _2892 + _2893;
    float _2895 = cvdR.z * _2876;
    float _2896 = _2894 + _2895;
    float _2897 = cvdG.x * _2874;
    float _2898 = cvdG.y * _2875;
    float _2899 = _2897 + _2898;
    float _2900 = cvdG.z * _2876;
    float _2901 = _2899 + _2900;
    float _2902 = cvdB.x * _2874;
    float _2903 = cvdB.y * _2875;
    float _2904 = _2902 + _2903;
    float _2905 = cvdB.z * _2876;
    float _2906 = _2904 + _2905;
    float _2907 = saturate(_2896);
    float _2908 = saturate(_2901);
    float _2909 = saturate(_2906);
    _2911 = _2907;
    _2912 = _2908;
    _2913 = _2909;
  } else {
    _2911 = _2874;
    _2912 = _2875;
    _2913 = _2876;
  }
  int _2914 = (uint)(cPassEnabled) & 16;
  bool _2915 = (_2914 == 0);
  if (!_2915) {
    float _2928 = screenInverseSize.x * SV_Position.x;
    float _2929 = screenInverseSize.y * SV_Position.y;
    float4 _2932 = ImagePlameBase.SampleLevel(BilinearClamp, float2(_2928, _2929), 0.0f);
    float _2937 = _2932.x * ColorParam.x;
    float _2938 = _2932.y * ColorParam.y;
    float _2939 = _2932.z * ColorParam.z;
    float _2940 = _2932.w * ColorParam.w;
    float _2942 = ImagePlameAlpha.SampleLevel(BilinearClamp, float2(_2928, _2929), 0.0f);
    float _2944 = _2942.x * Levels_Rate;
    float _2945 = _2944 + Levels_Range;
    float _2946 = saturate(_2945);
    float _2947 = _2940 * _2946;
    bool _2948 = (_2937 < 0.5f);
    bool _2949 = (_2938 < 0.5f);
    bool _2950 = (_2939 < 0.5f);
    float _2951 = _2911 * 2.0f;
    float _2952 = _2951 * _2937;
    float _2953 = _2912 * 2.0f;
    float _2954 = _2953 * _2938;
    float _2955 = _2913 * 2.0f;
    float _2956 = _2955 * _2939;
    float _2957 = 1.0f - _2937;
    float _2958 = 1.0f - _2938;
    float _2959 = 1.0f - _2939;
    float _2960 = 1.0f - _2911;
    float _2961 = 1.0f - _2912;
    float _2962 = 1.0f - _2913;
    float _2963 = _2960 * 2.0f;
    float _2964 = _2963 * _2957;
    float _2965 = _2961 * 2.0f;
    float _2966 = _2965 * _2958;
    float _2967 = _2962 * 2.0f;
    float _2968 = _2967 * _2959;
    float _2969 = 1.0f - _2964;
    float _2970 = 1.0f - _2966;
    float _2971 = 1.0f - _2968;
    float _2972 = select(_2948, _2952, _2969);
    float _2973 = select(_2949, _2954, _2970);
    float _2974 = select(_2950, _2956, _2971);
    float _2975 = _2972 - _2911;
    float _2976 = _2973 - _2912;
    float _2977 = _2974 - _2913;
    float _2978 = _2975 * _2947;
    float _2979 = _2976 * _2947;
    float _2980 = _2977 * _2947;
    float _2981 = _2978 + _2911;
    float _2982 = _2979 + _2912;
    float _2983 = _2980 + _2913;
    _2985 = _2981;
    _2986 = _2982;
    _2987 = _2983;
  } else {
    _2985 = _2911;
    _2986 = _2912;
    _2987 = _2913;
  }
  bool _2990 = !(useDynamicRangeConversion == 0.0f);
  if (_2990) {
    float _2995 = _2985 * 0.6699999570846558f;
    float _2996 = mad(0.16500000655651093f, _2986, _2995);
    float _2997 = mad(0.16500000655651093f, _2987, _2996);
    float _2998 = _2985 * 0.16500000655651093f;
    float _2999 = mad(0.6699999570846558f, _2986, _2998);
    float _3000 = mad(0.16500000655651093f, _2987, _2999);
    float _3001 = mad(0.16500000655651093f, _2986, _2998);
    float _3002 = mad(0.6699999570846558f, _2987, _3001);
    float _3003 = _2997 * 0.6370000243186951f;
    float _3004 = mad(0.1446000039577484f, _3000, _3003);
    float _3005 = mad(0.1688999980688095f, _3002, _3004);
    float _3006 = _2997 * 0.26269999146461487f;
    float _3007 = mad(0.6779999732971191f, _3000, _3006);
    float _3008 = mad(0.059300001710653305f, _3002, _3007);
    float _3009 = mad(0.02810000069439411f, _3000, 0.0f);
    float _3010 = mad(1.0609999895095825f, _3002, _3009);
    float _3011 = _3008 + _3005;
    float _3012 = _3011 + _3010;
    float _3013 = _3005 / _3012;
    float _3014 = _3008 / _3012;
    float _3015 = kneeStartNit / exposureScale;
    float _3016 = _3015 * 0.009999999776482582f;
    float _3017 = 1.0f - knee;
    bool _3018 = (_3008 < _3016);
    if (_3018) {
      float _3020 = _3008 * exposureScale;
      _3035 = _3020;
    } else {
      float _3022 = exposureScale * _3017;
      float _3023 = _3022 * _3016;
      float _3024 = _3016 * exposureScale;
      float _3025 = log2(_3017);
      float _3026 = _3023 * 0.6931471824645996f;
      float _3027 = _3026 * _3025;
      float _3028 = _3024 - _3027;
      float _3029 = _3008 / _3016;
      float _3030 = _3029 - knee;
      float _3031 = log2(_3030);
      float _3032 = _3026 * _3031;
      float _3033 = _3028 + _3032;
      _3035 = _3033;
    }
    float _3036 = _3013 / _3014;
    float _3037 = _3036 * _3035;
    float _3038 = 1.0f - _3013;
    float _3039 = _3038 - _3014;
    float _3040 = _3039 / _3014;
    float _3041 = _3040 * _3035;
    float _3042 = _3037 * 1.7166999578475952f;
    float _3043 = mad(-0.35569998621940613f, _3035, _3042);
    float _3044 = mad(-0.2533999979496002f, _3041, _3043);
    float _3045 = _3037 * -0.666700005531311f;
    float _3046 = mad(1.6165000200271606f, _3035, _3045);
    float _3047 = mad(0.015799999237060547f, _3041, _3046);
    float _3048 = _3037 * 0.01759999990463257f;
    float _3049 = mad(-0.04280000180006027f, _3035, _3048);
    float _3050 = mad(0.9420999884605408f, _3041, _3049);
    float _3051 = _3044 * 1.6534652709960938f;
    float _3052 = mad(-0.32673269510269165f, _3047, _3051);
    float _3053 = mad(-0.32673269510269165f, _3050, _3052);
    float _3054 = _3044 * -0.32673269510269165f;
    float _3055 = mad(1.6534652709960938f, _3047, _3054);
    float _3056 = mad(-0.32673269510269165f, _3050, _3055);
    float _3057 = mad(-0.32673269510269165f, _3047, _3054);
    float _3058 = mad(1.6534652709960938f, _3050, _3057);
    _3060 = _3053;
    _3061 = _3056;
    _3062 = _3058;
  } else {
    _3060 = _2985;
    _3061 = _2986;
    _3062 = _2987;
  }
  SV_Target.x = _3060;
  SV_Target.y = _3061;
  SV_Target.z = _3062;
  SV_Target.w = 0.0f;

  // untonemapped is linear
  SV_Target.rgb = Tonemap(untonemapped, SV_Target.rgb);
  return SV_Target;
}

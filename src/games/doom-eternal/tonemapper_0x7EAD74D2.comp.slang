
// ACES ToneMap
#version 450

#include "./common.slang"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct _93 {
  float _m0;
  float _m1;
};

struct _94 {
  float _m0[10];
  float _m1[10];
  _93 _m2;
  _93 _m3;
  _93 _m4;
  float _m5;
  float _m6;
};

struct _559 {
  float _m0[6];
  float _m1[6];
  _93 _m2;
  _93 _m3;
  _93 _m4;
  float _m5;
  float _m6;
};

layout(set = 0, binding = 0, std140) uniform _1425_1427 {
  vec4 _m0;
  vec4 _m1;
  vec4 _m2;
  float _m3;
  float _m4;
  float _m5;
  float _m6;
  float _m7;
  float _m8;
  float _m9;
  float _m10;
  float _m11;
  float _m12;
  float _m13;
  float _m14;
  float _m15;
  float _m16;
  float _m17;
  float _m18;
  float _m19;
  float _m20;
  uint _m21;
  float _m22;
  float _m23;
  float _m24;
  float _m25;
  float _m26;
  float _m27;
  float _m28;
  float _m29;
  float _m30;
  float _m31;
  float _m32[3];
}
_1427;

layout(set = 0, binding = 1, std140) uniform _1617_1619 {
  vec4 _m0[64];
}
_1619;

layout(set = 1, binding = 1, rgba16f) uniform writeonly image3D _1603;

uint _136;
uint _138;
uint _140;
uint _142;
uint _144;
uint _146;
uint _148;
uint _149;
uint _151;
uint _152;
uint _154;
uint _156;
uint _158;
uint _160;
uint _162;
uint _164;
uint _166;
uint _168;
uint _170;

vec3 _128(vec3 _127) {
  vec3 _1347 = (_127 * 9.22029018402099609375) - vec3(6.907755374908447265625);
  return max(vec3(0.0), exp(_1347) - vec3(0.001000000047497451305389404296875));
}

vec3 _31(vec3 _29, mat3 _30) {
  return _29 * _30;
}

float _12(float _9, float _10, float _11) {
  return max(_9, max(_10, _11));
}

float _17(float _14, float _15, float _16) {
  return min(_14, min(_15, _16));
}

float _53(vec3 _52) {
  float _290 = _52.x;
  float _293 = _52.y;
  float _297 = _52.z;
  float _289 = _12(_290, _293, _297);
  float _303 = _52.x;
  float _306 = _52.y;
  float _309 = _52.z;
  float _302 = _17(_303, _306, _309);
  return (max(_289, 1.0000000133514319600180897396058e-10) - max(_302, 1.0000000133514319600180897396058e-10)) / max(_289, 0.00999999977648258209228515625);
}

float _59(vec3 _58) {
  float _374 = 1.75;
  float _376 = _58.x;
  float _379 = _58.y;
  float _382 = _58.z;
  float _385 = sqrt(((_382 * (_382 - _379)) + (_379 * (_379 - _376))) + (_376 * (_376 - _382)));
  return (((_382 + _379) + _376) + (_374 * _385)) / 3.0;
}

float _117(float _116) {
  float _1170 = max(1.0 - abs(_116 / 2.0), 0.0);
  float _1176 = 1.0 + (sign(_116) * (1.0 - (_1170 * _1170)));
  return _1176 / 2.0;
}

float _110(float _107, float _108, float _109) {
  float _1004;
  if (_107 <= (0.666666686534881591796875 * _109)) {
    _1004 = _108;
  } else {
    if (_107 >= (2.0 * _109)) {
      _1004 = 0.0;
    } else {
      _1004 = _108 * ((_109 / _107) - 0.5);
    }
  }
  return _1004;
}

float _35(float _34) {
  float _201;
  if (_34 < 1.0) {
    _201 = _34;
  } else {
    _201 = 1.0 / _34;
  }
  float _196 = _201;
  float _209 = _196 * _196;
  float _213 = 0.087292902171611785888671875;
  _213 = (-0.3018949925899505615234375) + (_213 * _209);
  _213 = 1.0 + (_213 * _209);
  _213 *= _196;
  float _229;
  if (_34 < 1.0) {
    _229 = _213;
  } else {
    _229 = 1.57079637050628662109375 - _213;
  }
  return _229;
}

float _38(float _37) {
  float _243 = abs(_37);
  float _240 = _35(_243);
  float _248;
  if (_37 < 0.0) {
    _248 = -_240;
  } else {
    _248 = _240;
  }
  return _248;
}

float _43(float _41, float _42) {
  float _262 = _41 / _42;
  float _258 = _38(_262);

  if (_42 < 0.0) {
    _258 += ((_41 >= 0.0) ? 3.1415927410125732421875 : (-3.1415927410125732421875));
  }
  return _258;
}

float _56(vec3 _55) {
  bool _329 = _55.x == _55.y;
  bool _337;
  if (_329) {
    _337 = _55.y == _55.z;
  } else {
    _337 = _329;
  }
  float _340;
  if (_337) {
    _340 = 0.0;
  } else {
    float _360 = 1.73205077648162841796875 * (_55.y - _55.z);
    float _361 = ((2.0 * _55.x) - _55.y) - _55.z;
    _340 = 57.295780181884765625 * _43(_360, _361);
  }
  if (_340 < 0.0) {
    _340 += 360.0;
  }
  return _340;
}

float _121(float _119, float _120) {
  float _1189 = _119 - _120;
  if (_1189 < (-180.0)) {
    _1189 += 360.0;
  } else {
    if (_1189 > 180.0) {
      _1189 -= 360.0;
    }
  }
  return _1189;
}

float _114(float _112, float _113) {
  float _1026[5] = float[]((-_113) / 2.0, (-_113) / 4.0, 0.0, _113 / 4.0, _113 / 2.0);
  float _1038 = 0.0;
  bool _1042 = _112 > _1026[0];
  bool _1049;
  if (_1042) {
    _1049 = _112 < _1026[4];
  } else {
    _1049 = _1042;
  }
  if (_1049) {
    float _1052 = ((_112 - _1026[0]) * 4.0) / _113;
    int _1060 = int(_1052);
    float _1063 = _1052 - float(_1060);
    float _1071[4] = float[]((_1063 * _1063) * _1063, _1063 * _1063, _1063, 1.0);
    if (_1060 == 3) {
      _1038 = (((_1071[0] * (-0.16666667163372039794921875)) + (_1071[1] * 0.5)) + (_1071[2] * (-0.5))) + (_1071[3] * 0.16666667163372039794921875);
    } else {
      if (_1060 == 2) {
        _1038 = (((_1071[0] * 0.5) + (_1071[1] * (-1.0))) + (_1071[2] * 0.0)) + (_1071[3] * 0.666666686534881591796875);
      } else {
        if (_1060 == 1) {
          _1038 = (((_1071[0] * (-0.5)) + (_1071[1] * 0.5)) + (_1071[2] * 0.5)) + (_1071[3] * 0.16666667163372039794921875);
        } else {
          if (_1060 == 0) {
            _1038 = (((_1071[0] * 0.16666667163372039794921875) + (_1071[1] * 0.0)) + (_1071[2] * 0.0)) + (_1071[3] * 0.0);
          } else {
            _1038 = 0.0;
          }
        }
      }
    }
  }
  return (_1038 * 3.0) / 2.0;
}

mat3 _85(float _83, vec3 _84) {
  mat3 _489;
  _489[0].x = ((1.0 - _83) * _84.x) + _83;
  _489[1].x = (1.0 - _83) * _84.x;
  _489[2].x = (1.0 - _83) * _84.x;
  _489[0].y = (1.0 - _83) * _84.y;
  _489[1].y = ((1.0 - _83) * _84.y) + _83;
  _489[2].y = (1.0 - _83) * _84.y;
  _489[0].z = (1.0 - _83) * _84.z;
  _489[1].z = (1.0 - _83) * _84.z;
  _489[2].z = ((1.0 - _83) * _84.z) + _83;
  return _489;
}

float _46(float _45) {
  return log2(_45) / 3.3219280242919921875;
}

vec3 _26(mat3 _24, vec3 _25) {
  return _24 * _25;
}

float _49(float _48) {
  return pow(10.0, _48);
}

float _88(float _87) {
  _559 _561 = _559(float[](-4.0, -4.0, -3.1573765277862548828125, -0.485249996185302734375, 1.84773242473602294921875, 1.84773242473602294921875), float[](-0.718548238277435302734375, 2.0810306072235107421875, 3.66812419891357421875, 4.0, 4.0, 4.0), _93(5.4931642807787284255027770996094e-06, 9.9999997473787516355514526367188e-05), _93(0.180000007152557373046875, 4.80000019073486328125), _93(47185.921875, 10000.0), 0.0, 0.0);
  float _586 = max(_87, 6.1035199905745685100555419921875e-05);
  float _582 = _46(_586);
  float _589 = _561._m2._m0;
  float _596;
  if (_582 <= _46(_589)) {
    float _597 = _561._m2._m1;
    _596 = _46(_597);
  } else {
    float _603 = _561._m2._m0;
    bool _607 = _582 > _46(_603);
    bool _617;
    if (_607) {
      float _612 = _561._m3._m0;
      _617 = _582 < _46(_612);
    } else {
      _617 = _607;
    }
    if (_617) {
      float _622 = _561._m2._m0;
      float _628 = _561._m3._m0;
      float _632 = _561._m2._m0;
      float _620 = (3.0 * (_582 - _46(_622))) / (_46(_628) - _46(_632));
      int _639 = int(_620);
      float _642 = _620 - float(_639);
      vec3 _647 = vec3(_561._m0[_639], _561._m0[_639 + 1], _561._m0[_639 + 2]);
      vec3 _660 = vec3(_642 * _642, _642, 1.0);
      mat3 _673 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _674 = _647;
      _596 = dot(_660, _26(_673, _674));
    } else {
      float _680 = _561._m3._m0;
      bool _684 = _582 >= _46(_680);
      bool _694;
      if (_684) {
        float _689 = _561._m4._m0;
        _694 = _582 < _46(_689);
      } else {
        _694 = _684;
      }
      if (_694) {
        float _699 = _561._m3._m0;
        float _705 = _561._m4._m0;
        float _709 = _561._m3._m0;
        float _697 = (3.0 * (_582 - _46(_699))) / (_46(_705) - _46(_709));
        int _715 = int(_697);
        float _718 = _697 - float(_715);
        vec3 _723 = vec3(_561._m1[_715], _561._m1[_715 + 1], _561._m1[_715 + 2]);
        vec3 _736 = vec3(_718 * _718, _718, 1.0);
        mat3 _743 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _744 = _723;
        _596 = dot(_736, _26(_743, _744));
      } else {
        float _749 = _561._m4._m1;
        _596 = _46(_749);
      }
    }
  }
  float _753 = _596;
  return _49(_753);
}

vec3 _125(vec3 _124) {
  vec3 _1212 = _124;
  float _1211 = _53(_1212);
  vec3 _1216 = _124;
  float _1215 = _59(_1216);
  float _1225 = (_1211 - 0.4000000059604644775390625) / 0.20000000298023223876953125;
  float _1219 = _117(_1225);
  float _1232 = _1215;
  float _1234 = 0.0500000007450580596923828125 * _1219;
  float _1235 = 0.07999999821186065673828125;
  float _1227 = 1.0 + _110(_1232, _1234, _1235);
  vec3 _1238 = _124 * _1227;
  vec3 _1243 = _1238;
  float _1242 = _56(_1243);
  float _1247 = _1242;
  float _1249 = 0.0;
  float _1246 = _121(_1247, _1249);
  float _1253 = _1246;
  float _1255 = 135.0;
  float _1251 = _114(_1253, _1255);
  _1238.x += (((_1251 * _1211) * (0.02999999932944774627685546875 - _1238.x)) * 0.180000007152557373046875);
  _1238 = max(_1238, vec3(0.0));
  vec3 _1287 = _1238;
  mat3 _1289 = mat3(vec3(1.45143949985504150390625, -0.236510813236236572265625, -0.21492855250835418701171875), vec3(-0.076553881168365478515625, 1.17623007297515869140625, -0.09967593848705291748046875), vec3(0.008316130377352237701416015625, -0.00603245012462139129638671875, 0.997716248035430908203125));
  vec3 _1273 = _31(_1287, _1289);
  _1273 = clamp(_1273, vec3(0.0), vec3(65504.0));
  float _1302 = 0.959999978542327880859375;
  vec3 _1303 = vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875);
  mat3 _1296 = _85(_1302, _1303);
  vec3 _1305 = _1273;
  mat3 _1307 = _1296;
  _1273 = _31(_1305, _1307);
  float _1311 = _1273.x;
  vec3 _1310;
  _1310.x = _88(_1311);
  float _1316 = _1273.y;
  _1310.y = _88(_1316);
  float _1321 = _1273.z;
  _1310.z = _88(_1321);
  vec3 _1340 = _1310;
  mat3 _1342 = mat3(vec3(0.695452153682708740234375, 0.14067868888378143310546875, 0.1638690531253814697265625), vec3(0.044794611632823944091796875, 0.859670937061309814453125, 0.095534317195415496826171875), vec3(-0.0055258697830140590667724609375, 0.0040252101607620716094970703125, 1.00150072574615478515625));
  vec3 _1326 = _31(_1340, _1342);
  return _1326;
}

_94 _99(float _96, float _97, float _98) {
  float _782 = _97 * exp2(_96);
  float _785 = _97;
  float _793 = _97 * exp2(_98);
  _94 _758 = _94(float[](-2.3010299205780029296875, -2.3010299205780029296875, -1.9312000274658203125, -1.5204999446868896484375, -1.0578000545501708984375, -0.4668000042438507080078125, 0.11937999725341796875, 0.7088134288787841796875, 1.2911865711212158203125, 1.2911865711212158203125), float[](0.80891323089599609375, 1.19108676910400390625, 1.5683000087738037109375, 1.94830000400543212890625, 2.308300018310546875, 2.63840007781982421875, 2.85949993133544921875, 2.9872608184814453125, 3.0127391815185546875, 3.0127391815185546875), _93(_88(_782), 9.9999997473787516355514526367188e-05), _93(_88(_785), 10.0), _93(_88(_793), 1000.0), 3.0, 0.0599999986588954925537109375);
  return _758;
}

float _105(float _103, _94 _104) {
  float _805 = max(_103, 6.1035199905745685100555419921875e-05);
  float _802 = _46(_805);
  float _808 = _104._m2._m0;
  float _815;
  if (_802 <= _46(_808)) {
    float _821 = _104._m2._m1;
    float _827 = _104._m2._m0;
    _815 = (_802 * _104._m5) + (_46(_821) - (_104._m5 * _46(_827)));
  } else {
    float _836 = _104._m2._m0;
    bool _840 = _802 > _46(_836);
    bool _849;
    if (_840) {
      float _844 = _104._m3._m0;
      _849 = _802 < _46(_844);
    } else {
      _849 = _840;
    }
    if (_849) {
      float _855 = _104._m2._m0;
      float _861 = _104._m3._m0;
      float _865 = _104._m2._m0;
      float _852 = (7.0 * (_802 - _46(_855))) / (_46(_861) - _46(_865));
      int _871 = int(_852);
      float _874 = _852 - float(_871);
      vec3 _879 = vec3(_104._m0[_871], _104._m0[_871 + 1], _104._m0[_871 + 2]);
      vec3 _892 = vec3(_874 * _874, _874, 1.0);
      mat3 _899 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _900 = _879;
      _815 = dot(_892, _26(_899, _900));
    } else {
      float _906 = _104._m3._m0;
      bool _910 = _802 >= _46(_906);
      bool _919;
      if (_910) {
        float _914 = _104._m4._m0;
        _919 = _802 < _46(_914);
      } else {
        _919 = _910;
      }
      if (_919) {
        float _924 = _104._m3._m0;
        float _930 = _104._m4._m0;
        float _934 = _104._m3._m0;
        float _922 = (7.0 * (_802 - _46(_924))) / (_46(_930) - _46(_934));
        int _940 = int(_922);
        float _943 = _922 - float(_940);
        vec3 _948 = vec3(_104._m1[_940], _104._m1[_940 + 1], _104._m1[_940 + 2]);
        vec3 _961 = vec3(_943 * _943, _943, 1.0);
        mat3 _968 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _969 = _948;
        _815 = dot(_961, _26(_968, _969));
      } else {
        float _979 = _104._m4._m1;
        float _985 = _104._m4._m0;
        _815 = (_802 * _104._m6) + (_46(_979) - (_104._m6 * _46(_985)));
      }
    }
  }
  float _992 = _815;
  return _49(_992);
}

float _64(float _61, float _62, float _63) {
  return (_61 - _63) / (_62 - _63);
}

vec3 _70(vec3 _67, float _68, float _69) {
  float _426 = _67.x;
  float _429 = _68;
  float _431 = _69;
  float _434 = _67.y;
  float _437 = _68;
  float _439 = _69;
  float _442 = _67.z;
  float _445 = _68;
  float _447 = _69;
  return vec3(_64(_426, _429, _431), _64(_434, _437, _439), _64(_442, _445, _447));
}

float _75(float _72, float _73, float _74) {
  return (_72 * (_73 - _74)) + _74;
}

vec3 _80(vec3 _77, float _78, float _79) {
  float _462 = _77.x;
  float _465 = _78;
  float _467 = _79;
  float _470 = _77.y;
  float _473 = _78;
  float _475 = _79;
  float _478 = _77.z;
  float _481 = _78;
  float _483 = _79;
  return vec3(_75(_462, _465, _467), _75(_470, _473, _475), _75(_478, _481, _483));
}

vec3 _133(vec3 _130, float _131, float _132) {
  vec3 _1377 = _130;
  mat3 _1379 = mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375));
  vec3 _1394 = _31(_1377, _1379);
  mat3 _1395 = mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875));
  vec3 _1409 = _31(_1394, _1395);
  mat3 _1410 = mat3(vec3(1.04981100559234619140625, -0.0, -9.7479998657945543527603149414062e-05), vec3(-0.495902955532073974609375, 1.37331295013427734375, 0.09824003279209136962890625), vec3(3.9999999756901161163114011287689e-08, -0.0, 0.991252124309539794921875));
  vec3 _1363 = _31(_1409, _1410);
  vec3 _1413 = _1363;
  vec3 _1412 = _125(_1413);
  vec3 _1417 = _1412;
  mat3 _1419 = mat3(vec3(1.45143949985504150390625, -0.236510813236236572265625, -0.21492855250835418701171875), vec3(-0.076553881168365478515625, 1.17623007297515869140625, -0.09967593848705291748046875), vec3(0.008316130377352237701416015625, -0.00603245012462139129638671875, 0.997716248035430908203125));
  vec3 _1416 = _31(_1417, _1419);
  float _1431 = _1427._m25;  // min stops
  float _1435 = _1427._m26;  // white point

  float _1438 = _1427._m27;  // max stops
  _94 _1421 = _99(_1431, _1435, _1438);
  float _1443 = _1416.x;
  _94 _1446 = _1421;
  vec3 _1442;
  _1442.x = _105(_1443, _1446);
  float _1450 = _1416.y;
  _94 _1453 = _1421;
  _1442.y = _105(_1450, _1453);
  float _1457 = _1416.z;
  _94 _1460 = _1421;
  _1442.z = _105(_1457, _1460);
  vec3 _1465 = _1442;
  float _1467 = _132;
  float _1469 = _131;
  vec3 _1464 = _70(_1465, _1467, _1469);
  vec3 _1482 = _1464;
  mat3 _1484 = mat3(vec3(0.662454128265380859375, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875), vec3(-0.0055746599100530147552490234375, 0.0040607298724353313446044921875, 1.0103390216827392578125));
  vec3 _1472 = _31(_1482, _1484);
  vec3 _1499 = _1472;
  mat3 _1501 = mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125));
  _1464 = _31(_1499, _1501);
  vec3 _1516 = _1464;
  mat3 _1518 = mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875));
  _1464 = _31(_1516, _1518);
  _1464 = max(vec3(0.0), _1464);
  vec3 _1522 = _1464;
  float _1524 = _132;
  float _1526 = _131;
  _1464 = max(vec3(0.0), _80(_1522, _1524, _1526));
  return _1464;
}

void main() {
  _136 = 2147483648u;
  _138 = 1073741824u;
  _140 = 0u;
  _142 = 268435456u;
  _144 = 536870912u;
  _146 = 805306368u;
  _148 = 1073741824u;
  _149 = 1342177280u;
  _151 = 0u;
  _152 = 16777216u;
  _154 = 33554432u;
  _156 = 50331648u;
  _158 = 67108864u;
  _160 = 83886080u;
  _162 = 100663296u;
  _164 = 117440512u;
  _166 = 134217728u;
  _168 = 150994944u;
  _170 = 167772160u;
  float _1533 = _1427._m28;  // exposure?
  float _1537 = _1427._m29;
  ivec3 _1543 = ivec3(gl_GlobalInvocationID);
  int _1549 = int(_1427._m30);
  bool _1557 = _1543.x >= _1549;
  bool _1565;
  if (!_1557) {
    _1565 = _1543.y >= _1549;
  } else {
    _1565 = _1557;
  }
  bool _1573;
  if (!_1565) {
    _1573 = _1543.z >= _1549;
  } else {
    _1573 = _1565;
  }

  if (_1573) {
    return;
  }
  vec3 _1577 = vec3(_1543) / vec3(_1427._m30 - 1.0);
  vec3 _1585 = _1577;
  _1577 = _128(_1585);
  float3 untonemapped = _1577 * 3.5f;  // Match SDR
  _1577 *= _1427._m31;                 // brightness
  vec3 _1594 = _1577;
  float _1596 = _1533;
  float _1598 = _1537;
  vec3 _1593;
  if (RENODX_TONE_MAP_TYPE) {
    _1593 = Tonemap(untonemapped.rgb) * RENODX_DIFFUSE_WHITE_NITS;
  } else {
    _1593 = _133(_1594, _1596, _1598);
  }

  // _1603.Store(int3(_1543), float4(_1593, 1.0));
  imageStore(_1603, int3(_1543), float4(_1593, 1.0));
}

#include "./common.hlsl"

Texture2D<float4> t0 : register(t0);
SamplerState s0_s : register(s0);
cbuffer cb0 : register(b0){
  float4 cb0[5];
}

void main(
  float2 v0 : TEXCOORD0,
  float4 v1 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = t0.SampleLevel(s0_s, v0.xy, 0, int2(1, 1)).y;
  r0.x = renodx::color::gamma::EncodeSafe(r0.x);
  r0.y = t0.SampleLevel(s0_s, v0.xy, 0, int2(-1, 1)).y;
  r0.y = renodx::color::gamma::EncodeSafe(r0.y);
  r0.z = r0.y + r0.x;
  r0.w = t0.SampleLevel(s0_s, v0.xy, 0, int2(0, 1)).y;
  r0.w = renodx::color::gamma::EncodeSafe(r0.w);
  r0.z = r0.w * -2 + r0.z;
  r1.x = t0.SampleLevel(s0_s, v0.xy, 0, int2(-1, -1)).y;
  r1.x = renodx::color::gamma::EncodeSafe(r1.x);
  r1.y = t0.SampleLevel(s0_s, v0.xy, 0, int2(1, -1)).y;
  r1.y = renodx::color::gamma::EncodeSafe(r1.y);
  r1.z = r1.x + r1.y;
  r0.xy = r1.yx + r0.xy;
  r1.x = t0.SampleLevel(s0_s, v0.xy, 0, int2(0, -1)).y;
  r1.x = renodx::color::gamma::EncodeSafe(r1.x);
  r1.y = r1.x * -2 + r1.z;
  r1.z = t0.SampleLevel(s0_s, v0.xy, 0, int2(1, 0)).y;
  r1.z = renodx::color::gamma::EncodeSafe(r1.z);
  r1.w = t0.SampleLevel(s0_s, v0.xy, 0, int2(-1, 0)).y;
  r1.w = renodx::color::gamma::EncodeSafe(r1.w);
  r2.x = r1.w + r1.z;
  r3.xyzw = t0.SampleLevel(s0_s, v0.xy, 0).xyzw;
  r4.w = r3.w;
  r2.y = renodx::color::gamma::EncodeSafe(r3.y);
  r2.z = r2.y * -2 + r2.x;
  r1.y = abs(r2.z) * 2 + abs(r1.y);
  r0.z = r1.y + abs(r0.z);
  r1.y = r1.w * -2 + r0.y;
  r0.y = r0.y + r0.x;
  r0.x = r1.z * -2 + r0.x;
  r2.z = r1.x + r0.w;
  r2.w = r2.y * -2 + r2.z;
  r2.x = r2.z + r2.x;
  r0.y = r2.x * 2 + r0.y;
  r0.y = r0.y * 0.0833333358 + -r2.y;
  r0.x = abs(r2.w) * 2 + abs(r0.x);
  r0.x = abs(r1.y) + r0.x;
  bool isHorizontal = (r0.x >= r0.z);
  r0.z = isHorizontal ? r1.x : r1.w;
  r1.y = r0.z + -r2.y;
  r0.z = r0.z + r2.y;
  r2.x = isHorizontal ? r0.w : r1.z;
  r2.z = r2.x + -r2.y;
  r2.x = r2.x + r2.y;
  r2.w = max(abs(r2.z), abs(r1.y));
  bool is1Steepest = abs(r1.y) >= abs(r2.z);
  r2.z = 0.25 * r2.w;
  r0.z = is1Steepest ? r0.z : r2.x;
  r2.x = isHorizontal ? cb0[4].y : cb0[4].x;
  r1.y = is1Steepest ? -r2.x : r2.x;
  r2.xw = r1.yy * float2(0.5,0.5) + v0.xy;
  r2.x = isHorizontal ? v0.x : r2.x;
  r2.w = isHorizontal ? r2.w : v0.y;
  r5.x = isHorizontal ? cb0[4].x : 0;
  r6.x = -r5.x + r2.x;
  r7.x = r5.x + r2.x;
  r2.x = -r5.x * 1.5 + r6.x;
  r5.y = isHorizontal ? 0 : cb0[4].y;
  r6.y = -r5.y + r2.w;
  r7.y = r5.y + r2.w;
  r2.w = t0.SampleLevel(s0_s, r6.xy, 0).y;
  r2.w = renodx::color::gamma::EncodeSafe(r2.w);
  r8.x = -r0.z * 0.5 + r2.w;
  r2.w = t0.SampleLevel(s0_s, r7.xy, 0).y;
  r2.w = renodx::color::gamma::EncodeSafe(r2.w);
  r8.y = -r0.z * 0.5 + r2.w;
  bool reached1 = abs(r8.x) >= r2.z;
  bool reached2 = abs(r8.y) >= r2.z;
  r9.x = reached1 ? r6.x : r2.x;
  r2.x = -r5.y * 1.5 + r6.y;
  r9.y = reached1 ? r6.y : r2.x;
  r2.x = t0.SampleLevel(s0_s, r9.xy, 0).y;
  r2.x = renodx::color::gamma::EncodeSafe(r2.x);
  r2.x = reached1 ? r8.x : r2.x;
  r2.x = -r0.z * 0.5 + r2.x;
  r6.x = reached1 ? r8.x : r2.x;
  r2.x = r5.x * 1.5 + r7.x;
  r9.z = reached2 ? r7.x : r2.x;
  r2.x = r5.y * 1.5 + r7.y;
  r9.w = reached2 ? r7.y : r2.x;
  r2.x = t0.SampleLevel(s0_s, r9.zw, 0).y;
  r2.x = renodx::color::gamma::EncodeSafe(r2.x);
  r2.x = reached2 ? r8.y : r2.x;
  r2.x = -r0.z * 0.5 + r2.x;
  r6.y = reached2 ? r8.y : r2.x;
  bool notReachedBoth1 = !reached1 || !reached2;
  reached1 = abs(r6.x) >= r2.z;
  reached2 = abs(r6.y) >= r2.z;
  r2.w = -r5.x * 2 + r9.x;
  r7.x = reached1 ? r9.x : r2.w;
  r2.w = -r5.y * 2 + r9.y;
  r7.y = reached1 ? r9.y : r2.w;
  r2.w = t0.SampleLevel(s0_s, r7.xy, 0).y;
  r2.w = renodx::color::gamma::EncodeSafe(r2.w);
  r2.w = reached1 ? r6.x : r2.w;
  r2.w = -r0.z * 0.5 + r2.w;
  r10.x = reached1 ? r6.x : r2.w;
  r2.w = r5.x * 2 + r9.z;
  r7.z = reached2 ? r9.z : r2.w;
  r2.w = r5.y * 2 + r9.w;
  r7.w = reached2 ? r9.w : r2.w;
  r2.w = t0.SampleLevel(s0_s, r7.zw, 0).y;
  r2.w = renodx::color::gamma::EncodeSafe(r2.w);
  r2.w = reached2 ? r6.y : r2.w;
  r2.w = -r0.z * 0.5 + r2.w;
  r10.y = reached2 ? r6.y : r2.w;
  bool notReachedBoth2 = !reached1 || !reached2;
  reached1 = abs(r10.x) >= r2.z;
  reached2 = abs(r10.y) >= r2.z;
  r6.z = -r5.x * 4 + r7.x;
  r11.x = reached1 ? r7.x : r6.z;
  r6.z = -r5.y * 4 + r7.y;
  r11.y = reached1 ? r7.y : r6.z;
  r6.z = t0.SampleLevel(s0_s, r11.xy, 0).y;
  r6.z = renodx::color::gamma::EncodeSafe(r6.z);
  r6.z = reached1 ? r10.x : r6.z;
  r6.z = -r0.z * 0.5 + r6.z;
  r12.x = reached1 ? r10.x : r6.z;
  r6.z = r5.x * 4 + r7.z;
  r11.z = reached2 ? r7.z : r6.z;
  r6.z = r5.y * 4 + r7.w;
  r11.w = reached2 ? r7.w : r6.z;
  r6.z = t0.SampleLevel(s0_s, r11.zw, 0).y;
  r6.z = renodx::color::gamma::EncodeSafe(r6.z);
  r6.z = reached2 ? r10.y : r6.z;
  r6.z = -r0.z * 0.5 + r6.z;
  r0.z = -r0.z * 0.5 + r2.y;
  bool isLumaCenterSmaller = r0.z < 0;
  r12.y = reached2 ? r10.y : r6.z;
  bool notReachedBoth3 = !reached1 || !reached2;
  reached1 = abs(r12.x) >= r2.z;
  reached2 = abs(r12.y) >= r2.z;
  r8.zw = notReachedBoth3 ? r12.xy : r10.xy;
  r6.xy = notReachedBoth2 ? r8.zw : r6.xy;
  r6.xy = notReachedBoth1 ? r6.xy : r8.xy;
  bool correctVariation1 = (r6.x < 0.0) != isLumaCenterSmaller;
  bool correctVariation2 = (r6.y < 0.0) != isLumaCenterSmaller;
  r0.z = -r5.x * 12 + r11.x;
  r2.z = r5.x * 12 + r11.z;
  r8.z = reached2 ? r11.z : r2.z;
  r8.x = reached1 ? r11.x : r0.z;
  r0.z = -r5.y * 12 + r11.y;
  r2.z = r5.y * 12 + r11.w;
  r8.w = reached2 ? r11.w : r2.z;
  r8.y = reached1 ? r11.y : r0.z;
  r5.xyzw = notReachedBoth3 ? r8.xyzw : r11.xyzw;
  r5.xyzw = notReachedBoth2 ? r5.xyzw : r7.xyzw;
  r5.xyzw = notReachedBoth1 ? r5.xyzw : r9.xyzw;
  r2.xz = v0.xy + -r5.xy;
  r5.xy = -v0.xy + r5.zw;
  r0.z = isHorizontal ? r5.x : r5.y;
  r2.x = isHorizontal ? r2.x : r2.z;
  bool isDirection1 = r2.x < r0.z;
  bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;
  r2.w = r2.x + r0.z;
  r0.z = min(r2.x, r0.z);
  r2.x = 1 / r2.w;
  r0.z = r0.z * -r2.x + 0.5;
  r0.z = correctVariation ? r0.z : 0.f;
  r2.x = min(r1.x, r1.w);
  r1.x = max(r1.x, r1.w);
  r1.w = min(r2.y, r0.w);
  r0.w = max(r2.y, r0.w);
  r0.w = max(r1.z, r0.w);
  r1.z = min(r1.z, r1.w);
  r1.z = min(r2.x, r1.z);
  r0.w = max(r1.x, r0.w);
  r1.x = r0.w + -r1.z;
  r0.w = 0.165999994 * r0.w;
  r0.w = max(0.0833000019, r0.w);
  bool threshold = r1.x >= r0.w;
  r1.x = 1 / r1.x;
  r0.y = saturate(r1.x * abs(r0.y));
  r1.x = r0.y * -2 + 3;
  r0.y = r0.y * r0.y;
  r0.y = r1.x * r0.y;
  r0.y = r0.y * r0.y;
  r0.y = 0.75 * r0.y;
  r0.y = max(r0.z, r0.y);
  r0.yz = r0.yy * r1.yy + v0.xy;
  r1.x = isHorizontal ? v0.x : r0.y;
  r1.y = isHorizontal ? r0.z : v0.y;
  r0.xyz = t0.SampleLevel(s0_s, r1.xy, 0).xyz;
  r1.w = r4.w;
  r1.xyz = r0.xyz;
  o0.xyzw = threshold ? r1.xyzw : r3.xyzw;
  return;
}
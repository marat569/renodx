
// HUD Shader

#include "./colormath.hlsl"
#include "./cp2077.h"
#include "./injectedBuffer.hlsl"

static float _307;

cbuffer _32_34 : register(b0, space0) {
  float4 cb0[30] : packoffset(c0);
};

cbuffer _41_43 : register(b6, space0) {
  float4 cb6[30] : packoffset(c0);
};

cbuffer _37_39 : register(b12, space0) {
  float4 cb12[99] : packoffset(c0);
};

Texture2D<float4> _8 : register(t32, space0);
Texture2D<uint4> _12 : register(t51, space0);
Texture2D<float4> _13 : register(t0, space0);
Texture2D<float4> _14 : register(t1, space0);
Texture2D<float4> _15 : register(t2, space0);
Texture2D<float4> _16 : register(t3, space0);
Texture2D<float4> _17 : register(t5, space0);
Texture2D<float4> _18 : register(t6, space0);
StructuredBuffer<uint> _21 : register(t7, space0);
Texture2D<float4> _22 : register(t8, space0);
StructuredBuffer<float> _23 : register(t9, space0);
Texture2D<float4> _24 : register(t10, space0);
RWTexture2D<float4> _27 : register(u0, space0);
RWTexture2D<float4> _28 : register(u1, space0);
SamplerState _46 : register(s0, space0);

static uint3 gl_WorkGroupID;
static uint3 gl_LocalInvocationID;
struct SPIRV_Cross_Input {
  uint3 gl_WorkGroupID : SV_GroupID;
  uint3 gl_LocalInvocationID : SV_GroupThreadID;
};

void comp_main() {
  uint4 _76 = _21.Load(gl_WorkGroupID.x);
  uint _77 = _76.x;
  uint _85 = ((_77 << 4u) & 1048560u) + gl_LocalInvocationID.x;
  uint _86 = ((_77 >> 16u) << 4u) + gl_LocalInvocationID.y;
  float _87 = float(_85);
  float _88 = float(_86);
  float _98 = (_87 + 0.5f) / cb6[12u].z;
  float _99 = (_88 + 0.5f) / cb6[12u].w;
  bool _115 = ((_98 < cb6[9u].y) || (_99 < cb6[9u].z)) || (((1.0f - cb6[9u].y) < _98) || ((1.0f - cb6[9u].z) < _99));
  float _116;
  float _120;
  float _123;
  if (_115) {
    _116 = 0.0f;
    _120 = 0.0f;
    _123 = 0.0f;
  } else {
    bool _135 = cb6[0u].x > 0.0f;
    float _137 = _98 + (-0.5f);
    float _139 = _99 + (-0.5f);
    float _143 = cb6[0u].y + 0.119999997317790985107421875f;
    float _147 = max(_143 + abs(_137), 0.0f);
    float _148 = max(_143 + abs(_139), 0.0f);
    float _155 = clamp(sqrt((_148 * _148) + (_147 * _147)) * 20.0f, 0.0f, 1.0f);
    float _162 = ((_155 * _155) * cb6[0u].x) * (3.0f - (_155 * 2.0f));
    float _163 = _162 * 0.699999988079071044921875f;
    float _166 = ceil(_163) - _163;
    float _169 = (_166 * 50.0f) + 1.0f;
    float _178 = (((cos(cb0[0u].x) * 2.0f) + 200.0f) * _166) + 1.0f;
    float _190 = frac(floor(_169 * _98) * 0.103100001811981201171875f);
    float _191 = frac(floor(_178 * _99) * 0.103100001811981201171875f);
    float _192 = _191 + 33.3300018310546875f;
    float _194 = _190 + 33.3300018310546875f;
    float _195 = dot(float3(_190, _191, _190), float3(_192, _194, _194));
    float _201 = _191 + _190;
    float _204 = frac((_201 + (_195 * 2.0f)) * (_195 + _190));
    float _229 = abs(sin((_162 * 0.1680000126361846923828125f) * cb0[0u].x));
    float _234 = (_162 * 0.14000000059604644775390625f) + 1.0f;
    float _240 = dot(float3(_191, _190, _191), float3(_194, _192, _192));
    float _253 = (floor(frac(frac((_201 + (_240 * 2.0f)) * (_240 + _191)) + _229) * _234) * (1.0f / (((cos(frac(_204 + abs(sin(cb0[0u].x * 5000.0f))) * cb0[0u].x) * 0.0199999995529651641845703125f) + 1.0f) * _178))) + _99;
    float _255 = _253 * cb6[12u].w;
    float _264 = frac(round((_162 * 0.125f) * _255) * 0.103100001811981201171875f);
    float _265 = frac((_162 * 2.0620000362396240234375f) * cb0[0u].x);
    float _266 = _265 + 33.3300018310546875f;
    float _267 = _264 + 33.3300018310546875f;
    float _268 = dot(float3(_264, _265, _264), float3(_266, _267, _267));
    float _282 = frac(round((_162 * 0.012500000186264514923095703125f) * _255) * 0.103100001811981201171875f);
    float _283 = _282 + 33.3300018310546875f;
    float _284 = dot(float3(_282, _265, _282), float3(_266, _283, _283));
    float _301 = _135 ? ((((cb6[12u].z * ((floor(frac(_204 + _229) * _234) * (1.0f / (((sin(frac(_204 + abs(sin(cb0[0u].x * 100.0f))) * cb0[0u].x) * 0.0199999995529651641845703125f) + 1.0f) * _169))) + _98)) + 2.0f) + ((((_162 * _162) * 960.0f) * frac(((_265 + _264) + (_268 * 2.0f)) * (_268 + _264))) * frac(((_265 + _282) + (_284 * 2.0f)) * (_284 + _282)))) / cb6[12u].z) : _98;
    float _302 = _135 ? _253 : _99;
    bool _303 = cb6[0u].y > 0.0f;
    bool _305 = cb6[12u].x > 0.0f;
    float _1104;
    float _1105;
    float _1106;
    float _1108;
    float _1110;
    if (_303) {
      float _333 = floor(_301 * 2.5f) * 0.4000000059604644775390625f;
      float _335 = floor(_302 * 10.0f) * 0.100000001490116119384765625f;
      float _337 = _333 + 0.20000000298023223876953125f;
      float _339 = _335 + 0.0500000007450580596923828125f;
      float _343 = floor((cb0[0u].x * 2.0f) + (cb6[0u].y * 20.0f));
      float _344 = _343 * 0.00999999977648258209228515625f;
      float _358 = _337 + (((_344 + 1.0f) - (floor(_343 * 9.9999997473787516355514526367188e-05f) * 100.0f)) * 0.00999999977648258209228515625f);
      float _359 = _339 + (((_343 + 1.0f) - (floor(_344) * 100.0f)) * 0.00999999977648258209228515625f);
      float _369 = frac(_358 * 0.103100001811981201171875f);
      float _370 = frac(_359 * 0.103100001811981201171875f);
      float _372 = _369 + 33.3300018310546875f;
      float _373 = dot(float3(_369, _370, _369), float3(_370 + 33.3300018310546875f, _372, _372));
      float _381 = frac(((_370 + _369) + (_373 * 2.0f)) * (_373 + _369));
      float _384 = ((1.0f - _381) * ((cb6[0u].y * 0.75f) + (-0.100000001490116119384765625f))) + _381;
      float _387 = round(_384 - (_384 * (0.5f - (cb6[0u].y * 0.375f))));
      float _388 = _387 * _387;
      float _389 = _301 - _337;
      float _390 = _302 - _339;
      float _391 = _337 * _358;
      float _392 = _339 * _359;
      float _397 = (_333 + 0.300000011920928955078125f) * _358;
      float _398 = (_335 + 0.1500000059604644775390625f) * _359;
      float _401 = frac(_391 * 0.103100001811981201171875f);
      float _402 = frac(_392 * 0.103100001811981201171875f);
      float _404 = _401 + 33.3300018310546875f;
      float _405 = dot(float3(_401, _402, _401), float3(_402 + 33.3300018310546875f, _404, _404));
      float _418 = frac((_391 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _419 = frac((_392 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _421 = _418 + 33.3300018310546875f;
      float _422 = dot(float3(_418, _419, _418), float3(_419 + 33.3300018310546875f, _421, _421));
      float _436 = floor(frac(((_402 + _401) + (_405 * 2.0f)) * (_405 + _401)) * 3.25f) * 0.100000001490116119384765625f;
      float _437 = floor(frac(((_419 + _418) + (_422 * 2.0f)) * (_422 + _418)) * 3.25f) * 0.02500000037252902984619140625f;
      float _439 = _436 + (-0.20000000298023223876953125f);
      float _441 = _437 + (-0.0500000007450580596923828125f);
      float _445 = frac(_397 * 0.103100001811981201171875f);
      float _446 = frac(_398 * 0.103100001811981201171875f);
      float _448 = _445 + 33.3300018310546875f;
      float _449 = dot(float3(_445, _446, _445), float3(_446 + 33.3300018310546875f, _448, _448));
      float _462 = frac((_397 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _463 = frac((_398 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _465 = _462 + 33.3300018310546875f;
      float _466 = dot(float3(_462, _463, _462), float3(_463 + 33.3300018310546875f, _465, _465));
      float _479 = floor(frac(((_446 + _445) + (_449 * 2.0f)) * (_449 + _445)) * 3.25f) * 0.100000001490116119384765625f;
      float _480 = floor(frac(((_463 + _462) + (_466 * 2.0f)) * (_466 + _462)) * 3.25f) * 0.02500000037252902984619140625f;
      float _481 = _479 + (-0.20000000298023223876953125f);
      float _482 = _480 + (-0.0500000007450580596923828125f);
      float _485 = _389 - _439;
      float _486 = _390 - _441;
      float _496 = (-0.0250000059604644775390625f) - _389;
      float _498 = _496 + _436;
      float _499 = (-0.006250001490116119384765625f) - _390;
      float _501 = _499 + _437;
      uint _516 = (((((uint(_498 > 0.0f) + ((_498 < 0.0f) ? 4294967295u : 0u)) + ((_485 < 0.0f) ? 4294967295u : 0u)) + uint(_485 > 0.0f)) + ((_486 < 0.0f) ? 4294967295u : 0u)) + uint(_486 > 0.0f)) + (uint(_501 > 0.0f) - uint(_501 < 0.0f));
      float _524 = min(float(int(uint(int(_516) > int(3u)) - uint(int(_516) < int(3u)))), 0.0f);
      float _529 = _389 - _481;
      float _530 = _390 - _482;
      float _539 = _496 + _479;
      float _540 = _499 + _480;
      uint _555 = (((((uint(_539 > 0.0f) + ((_539 < 0.0f) ? 4294967295u : 0u)) + ((_529 < 0.0f) ? 4294967295u : 0u)) + uint(_529 > 0.0f)) + ((_530 < 0.0f) ? 4294967295u : 0u)) + uint(_530 > 0.0f)) + (uint(_540 > 0.0f) - uint(_540 < 0.0f));
      float _562 = min(float(int(uint(int(_555) > int(3u)) - uint(int(_555) < int(3u)))), 0.0f);
      float _569 = _301 + ((_388 * (((_439 - _481) * _562) + ((_481 - _439) * _524))) * 1.2000000476837158203125f);
      float _573 = _302 + ((_388 * (((_441 - _482) * _562) + ((_482 - _441) * _524))) * 1.2000000476837158203125f);
      uint _574 = uint(_98);
      uint _575 = uint(_99);
      float4 _576 = _8.Load(int3(uint2(_574, _575), 0u));
      float _578 = _576.y;
      float _886;
      if (_305) {
        uint _805 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * float(_574)), uint(cb12[79u].y * float(_575))), 0u)).y & 31u);
        float4 _808 = _14.Load(int3(uint2(_574 & 255u, _575 & 255u), 0u));
        float _811 = _808.y;
        float _815 = ((_808.x + _811) + _808.z) * 0.3333333432674407958984375f;
        float _816 = cb6[12u].x * _578;
        float _823 = _811 - _815;
        float _825 = _815 + (-0.5f);
        uint4 _831 = asuint(cb6[17u]);
        float _880 = (((((((_825 + (cb6[18u].w * _823)) * cb6[18u].y) * float(min((_831.x & _805), 1u))) + 1.0f) * (_816 / max(1.0f - _816, 9.9999999747524270787835121154785e-07f))) * ((((_825 + (cb6[19u].w * _823)) * cb6[19u].y) * float(min((_831.y & _805), 1u))) + 1.0f)) * ((((_825 + (cb6[20u].w * _823)) * cb6[20u].y) * float(min((_831.z & _805), 1u))) + 1.0f)) * ((((_825 + (cb6[21u].w * _823)) * cb6[21u].y) * float(min((_831.w & _805), 1u))) + 1.0f);
        _886 = cb6[12u].y * (_880 / max(_880 + 1.0f, 1.0f));
      } else {
        _886 = _578;
      }
      float _888 = _886 * cb6[0u].y;
      float _890 = (_569 + (-0.5f)) + _888;
      float _892 = (0.5f - _573) + _888;
      float _894 = atan(_892 / _890);
      bool _899 = _890 < 0.0f;
      bool _900 = _890 == 0.0f;
      bool _901 = _892 >= 0.0f;
      bool _902 = _892 < 0.0f;
      float _916 = sqrt((_890 * _890) + (_892 * _892));
      float _919 = ((_900 && _901) ? 1.57079637050628662109375f : ((_900 && _902) ? (-1.57079637050628662109375f) : ((_899 && _902) ? (_894 + (-3.1415927410125732421875f)) : ((_899 && _901) ? (_894 + 3.1415927410125732421875f) : _894)))) + clamp(cb6[0u].y * (_886 * 0.5f), 0.0f, 1.0f);
      uint _930 = uint(cb6[12u].z * frac((cos(_919) * _916) + 0.5f));
      uint _931 = uint(cb6[12u].w * frac(0.5f - (sin(_919) * _916)));
      float4 _932 = _8.Load(int3(uint2(_930, _931), 0u));
      float _934 = _932.x;
      float _935 = _932.y;
      float _936 = _932.z;
      float frontier_phi_14_12_ladder;
      float frontier_phi_14_12_ladder_1;
      float frontier_phi_14_12_ladder_2;
      float frontier_phi_14_12_ladder_3;
      float frontier_phi_14_12_ladder_4;
      if (_305) {
        float4 _1247 = _14.Load(int3(uint2(_930 & 255u, _931 & 255u), 0u));
        [branch]
        if (injectedData.fxFilmGrain) {
          float3 grainedColor = renodx::effects::ApplyFilmGrain(
              float3(_934, _935, _936),
              _1247.xy,
              frac(cb0[0u].x / 1000.f),
              injectedData.fxFilmGrain * 0.03f,
              (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
          frontier_phi_14_12_ladder = _573;
          frontier_phi_14_12_ladder_1 = _569;
          frontier_phi_14_12_ladder_2 = grainedColor.r;
          frontier_phi_14_12_ladder_3 = grainedColor.g;
          frontier_phi_14_12_ladder_4 = grainedColor.b;
        } else {
          uint _1244 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * float(_930)), uint(cb12[79u].y * float(_931))), 0u)).y & 31u);
          float _1249 = _1247.x;
          float _1250 = _1247.y;
          float _1251 = _1247.z;
          float _1254 = ((_1249 + _1250) + _1251) * 0.3333333432674407958984375f;
          float _1255 = cb6[12u].x * _934;
          float _1256 = cb6[12u].x * _935;
          float _1257 = cb6[12u].x * _936;
          float _1270 = _1249 - _1254;
          float _1271 = _1250 - _1254;
          float _1272 = _1251 - _1254;
          float _1276 = _1254 + (-0.5f);
          uint4 _1288 = asuint(cb6[17u]);
          float _1292 = float(min((_1288.x & _1244), 1u));
          float _1320 = float(min((_1288.y & _1244), 1u));
          float _1348 = float(min((_1288.z & _1244), 1u));
          float _1376 = float(min((_1288.w & _1244), 1u));
          float _1383 = (((((((_1276 + (cb6[18u].w * _1270)) * cb6[18u].x) * _1292) + 1.0f) * (_1255 / max(1.0f - _1255, 9.9999999747524270787835121154785e-07f))) * ((((_1276 + (cb6[19u].w * _1270)) * cb6[19u].x) * _1320) + 1.0f)) * ((((_1276 + (cb6[20u].w * _1270)) * cb6[20u].x) * _1348) + 1.0f)) * ((((_1276 + (cb6[21u].w * _1270)) * cb6[21u].x) * _1376) + 1.0f);
          float _1384 = (((((((_1276 + (cb6[18u].w * _1271)) * cb6[18u].y) * _1292) + 1.0f) * (_1256 / max(1.0f - _1256, 9.9999999747524270787835121154785e-07f))) * ((((_1276 + (cb6[19u].w * _1271)) * cb6[19u].y) * _1320) + 1.0f)) * ((((_1276 + (cb6[20u].w * _1271)) * cb6[20u].y) * _1348) + 1.0f)) * ((((_1276 + (cb6[21u].w * _1271)) * cb6[21u].y) * _1376) + 1.0f);
          float _1385 = (((((((_1276 + (cb6[18u].w * _1272)) * cb6[18u].z) * _1292) + 1.0f) * (_1257 / max(1.0f - _1257, 9.9999999747524270787835121154785e-07f))) * ((((_1276 + (cb6[19u].w * _1272)) * cb6[19u].z) * _1320) + 1.0f)) * ((((_1276 + (cb6[20u].w * _1272)) * cb6[20u].z) * _1348) + 1.0f)) * ((((_1276 + (cb6[21u].w * _1272)) * cb6[21u].z) * _1376) + 1.0f);
          frontier_phi_14_12_ladder = _573;
          frontier_phi_14_12_ladder_1 = _569;
          frontier_phi_14_12_ladder_2 = cb6[12u].y * (_1383 / max(_1383 + 1.0f, 1.0f));
          frontier_phi_14_12_ladder_3 = cb6[12u].y * (_1384 / max(_1384 + 1.0f, 1.0f));
          frontier_phi_14_12_ladder_4 = cb6[12u].y * (_1385 / max(_1385 + 1.0f, 1.0f));
        }
      } else {
        frontier_phi_14_12_ladder = _573;
        frontier_phi_14_12_ladder_1 = _569;
        frontier_phi_14_12_ladder_2 = _934;
        frontier_phi_14_12_ladder_3 = _935;
        frontier_phi_14_12_ladder_4 = _936;
      }
      _1104 = frontier_phi_14_12_ladder_1;
      _1105 = frontier_phi_14_12_ladder;
      _1106 = frontier_phi_14_12_ladder_2;
      _1108 = frontier_phi_14_12_ladder_3;
      _1110 = frontier_phi_14_12_ladder_4;
    } else {
      float4 _579 = _8.Load(int3(uint2(_85, _86), 0u));
      float _581 = _579.x;
      float _582 = _579.y;
      float _583 = _579.z;
      float frontier_phi_14_6_ladder;
      float frontier_phi_14_6_ladder_1;
      float frontier_phi_14_6_ladder_2;
      float frontier_phi_14_6_ladder_3;
      float frontier_phi_14_6_ladder_4;
      if (_305) {
        float4 _952 = _14.Load(int3(uint2(_85 & 255u, _86 & 255u), 0u));
        // Custom: Add Film Grain
        [branch]
        if (injectedData.fxFilmGrain) {
          float3 grainedColor = renodx::effects::ApplyFilmGrain(
              float3(_581, _582, _583),
              _952.xy,
              frac(cb0[0u].x / 1000.f),
              injectedData.fxFilmGrain * 0.03f,
              (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
          frontier_phi_14_6_ladder = _302;
          frontier_phi_14_6_ladder_1 = _301;
          frontier_phi_14_6_ladder_2 = grainedColor.r;
          frontier_phi_14_6_ladder_3 = grainedColor.g;
          frontier_phi_14_6_ladder_4 = grainedColor.b;
        } else {
          uint _949 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * _87), uint(cb12[79u].y * _88)), 0u)).y & 31u);
          float _954 = _952.x;
          float _955 = _952.y;
          float _956 = _952.z;
          float _959 = ((_954 + _955) + _956) * 0.3333333432674407958984375f;
          float _960 = cb6[12u].x * _581;
          float _961 = cb6[12u].x * _582;
          float _962 = cb6[12u].x * _583;
          float _975 = _954 - _959;
          float _976 = _955 - _959;
          float _977 = _956 - _959;
          float _981 = _959 + (-0.5f);
          uint4 _993 = asuint(cb6[17u]);
          float _997 = float(min((_993.x & _949), 1u));
          float _1025 = float(min((_993.y & _949), 1u));
          float _1053 = float(min((_993.z & _949), 1u));
          float _1081 = float(min((_993.w & _949), 1u));
          float _1088 = (((((((_981 + (cb6[18u].w * _975)) * cb6[18u].x) * _997) + 1.0f) * (_960 / max(1.0f - _960, 9.9999999747524270787835121154785e-07f))) * ((((_981 + (cb6[19u].w * _975)) * cb6[19u].x) * _1025) + 1.0f)) * ((((_981 + (cb6[20u].w * _975)) * cb6[20u].x) * _1053) + 1.0f)) * ((((_981 + (cb6[21u].w * _975)) * cb6[21u].x) * _1081) + 1.0f);
          float _1089 = (((((((_981 + (cb6[18u].w * _976)) * cb6[18u].y) * _997) + 1.0f) * (_961 / max(1.0f - _961, 9.9999999747524270787835121154785e-07f))) * ((((_981 + (cb6[19u].w * _976)) * cb6[19u].y) * _1025) + 1.0f)) * ((((_981 + (cb6[20u].w * _976)) * cb6[20u].y) * _1053) + 1.0f)) * ((((_981 + (cb6[21u].w * _976)) * cb6[21u].y) * _1081) + 1.0f);
          float _1090 = (((((((_981 + (cb6[18u].w * _977)) * cb6[18u].z) * _997) + 1.0f) * (_962 / max(1.0f - _962, 9.9999999747524270787835121154785e-07f))) * ((((_981 + (cb6[19u].w * _977)) * cb6[19u].z) * _1025) + 1.0f)) * ((((_981 + (cb6[20u].w * _977)) * cb6[20u].z) * _1053) + 1.0f)) * ((((_981 + (cb6[21u].w * _977)) * cb6[21u].z) * _1081) + 1.0f);
          frontier_phi_14_6_ladder = _302;
          frontier_phi_14_6_ladder_1 = _301;
          frontier_phi_14_6_ladder_2 = cb6[12u].y * (_1088 / max(_1088 + 1.0f, 1.0f));
          frontier_phi_14_6_ladder_3 = cb6[12u].y * (_1089 / max(_1089 + 1.0f, 1.0f));
          frontier_phi_14_6_ladder_4 = cb6[12u].y * (_1090 / max(_1090 + 1.0f, 1.0f));
        }
      } else {
        frontier_phi_14_6_ladder = _302;
        frontier_phi_14_6_ladder_1 = _301;
        frontier_phi_14_6_ladder_2 = _581;
        frontier_phi_14_6_ladder_3 = _582;
        frontier_phi_14_6_ladder_4 = _583;
      }
      _1104 = frontier_phi_14_6_ladder_1;
      _1105 = frontier_phi_14_6_ladder;
      _1106 = frontier_phi_14_6_ladder_2;
      _1108 = frontier_phi_14_6_ladder_3;
      _1110 = frontier_phi_14_6_ladder_4;
    }
    bool _1120 = cb6[1u].z > 0.0f;
    float _1404;
    if ((asuint(cb6[13u]).z != 0u) && _1120) {
      _1404 = (cb6[1u].z * (asfloat(_23.Load(6u).x) + (-1.0f))) + 1.0f;
    } else {
      _1404 = 1.0f;
    }
    float _1409 = _1104 + (-0.5f);
    float _1411 = (_1105 + (-0.5f)) * 2.0f;
    float _1419 = _1104 - (((_1411 * _1411) * _1409) * cb6[3u].x);
    float _1420 = _1105 - ((((_1409 * _1409) * 2.0f) * _1411) * cb6[3u].y);
    float _1423 = (_1419 + (-0.5f)) * 2.0f;
    float _1424 = (_1420 + (-0.5f)) * 2.0f;
    float _1426 = cb0[0u].x * 0.004999999888241291046142578125f;
    float _1429 = (clamp(_1420, 0.0f, 1.0f) + 1.0f) - _1426;
    float _1434 = clamp(abs(cos(_1429 * 650.0f)), 0.0f, 1.0f);
    float _1440 = clamp(_1419, 0.0f, 1.0f) + 1.0f;
    float _1441 = _1440 - _1426;
    float _1447 = sin(cb0[0u].x);
    float _1448 = _1440 + _1426;
    float _1463 = clamp(((((_1447 + _1447) * 0.100000001490116119384765625f) + 0.540000021457672119140625f) + ((clamp(abs(cos(_1448 * 550.0f)), 0.0f, 1.0f) + clamp(abs(cos(_1441 * 250.0f)), 0.0f, 1.0f)) * 0.1799999773502349853515625f)) * ((_1434 * 0.39999997615814208984375f) + 0.60000002384185791015625f), 0.0f, 1.0f);
    float _1615;
    float _1617;
    float _1619;
    if (cb6[1u].w > 0.0f) {
      float4 _1588 = _18.SampleLevel(_46, float2(_98, _99), 0.0f);
      float _1599 = (clamp(abs(cos(_1429 * 250.0f)), 0.0f, 1.0f) * 0.0007999999797903001308441162109375f) + 0.00120000005699694156646728515625f;
      float _1606 = (_1434 * 0.001199999940581619739532470703125f) + 0.001800000085495412349700927734375f;
      float _1608 = (_1599 + _1588.x) - _1606;
      float _1609 = (_1599 + _1588.y) - _1606;
      float _1610 = (_1599 + _1588.z) - _1606;
      float _1776;
      float _1777;
      float _1778;
      if (cb6[6u].x > 0.0f) {
        float _1766 = clamp((sqrt((_139 * _139) + (_137 * _137)) - cb6[5u].z) / (cb6[5u].w - cb6[5u].z), 0.0f, 1.0f);
        float _1772 = 1.0f - (((_1766 * _1766) * (3.0f - (_1766 * 2.0f))) * cb6[6u].x);
        _1776 = _1772 * _1608;
        _1777 = _1772 * _1609;
        _1778 = _1772 * _1610;
      } else {
        _1776 = _1608;
        _1777 = _1609;
        _1778 = _1610;
      }
      float _1780 = dot(float3(_1776, _1777, _1778), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      _1615 = (((_1776 - _1780) * cb6[6u].y) + _1780) * cb6[1u].w;
      _1617 = (((_1777 - _1780) * cb6[6u].y) + _1780) * cb6[1u].w;
      _1619 = (((_1778 - _1780) * cb6[6u].y) + _1780) * cb6[1u].w;
    } else {
      _1615 = 0.0f;
      _1617 = 0.0f;
      _1619 = 0.0f;
    }
    float _1808;
    float _1809;
    float _1810;
    if (cb6[2u].x > 0.0f) {
      float4 _1797 = _17.SampleLevel(_46, float2(_1419, 1.0f - _1420), 0.0f);

      if (injectedData.toneMapGammaCorrection >= 1.f) {
        _1797 = renodx::color::correct::Gamma(max(0.f, _1797));
      }

      _1808 = (cb6[2u].x * _1797.x) + _1615;
      _1809 = (cb6[2u].x * _1797.y) + _1617;
      _1810 = (cb6[2u].x * _1797.z) + _1619;
    } else {
      _1808 = _1615;
      _1809 = _1617;
      _1810 = _1619;
    }
    float _1988;
    float _1989;
    float _1990;
    if (_1120) {
      float4 _1951 = _16.SampleLevel(_46, float2(_1104, _1105), 0.0f);
      float4 _1958 = _15.SampleLevel(_46, float2(_1104, _1105), 0.0f);
      float _1963 = _1958.w;
      float _1964 = 1.0f - _1963;
      float _1969 = (_1964 * _1951.w) + _1963;
      _1988 = (((_1969 * ((_1958.x - _1106) + (_1964 * _1951.x))) + _1106) * cb6[1u].z) + _1808;
      _1989 = (((_1969 * ((_1958.y - _1108) + (_1964 * _1951.y))) + _1108) * cb6[1u].z) + _1809;
      _1990 = (((_1969 * ((_1958.z - _1110) + (_1964 * _1951.z))) + _1110) * cb6[1u].z) + _1810;
    } else {
      _1988 = _1808;
      _1989 = _1809;
      _1990 = _1810;
    }
    float _2160;
    float _2162;
    float _2164;
    if (cb6[1u].x > 0.0f) {
      float _2067 = cb6[6u].w * _1423;
      float _2068 = cb6[6u].w * _1424;
      float4 _2072 = _13.SampleLevel(_46, float2(_2067 + _1419, _2068 + _1420), 0.0f);
      float4 _2076 = _13.SampleLevel(_46, float2(_1419, _1420), 0.0f);
      float4 _2083 = _13.SampleLevel(_46, float2(_1419 - _2067, _1420 - _2068), 0.0f);
      float4 _2098 = _13.SampleLevel(_46, float2((cb6[7u].x * _1423) + _1419, (cb6[7u].y * _1424) + _1420), 1.0f);
      float4 _2109 = _13.SampleLevel(_46, float2((cb6[7u].z * _1423) + _1419, (cb6[7u].w * _1424) + _1420), 2.0f);
      float4 _2124 = _13.SampleLevel(_46, float2((cb6[8u].x * _1423) + _1419, (cb6[8u].y * _1424) + _1420), 4.0f);

      // Custom
      if (injectedData.toneMapGammaCorrection >= 1.f) {
        _2072 = renodx::color::correct::Gamma(max(0.f, _2072));
        _2076 = renodx::color::correct::Gamma(max(0.f, _2076));
        _2083 = renodx::color::correct::Gamma(max(0.f, _2083));
        _2098 = renodx::color::correct::Gamma(max(0.f, _2098));
        _2109 = renodx::color::correct::Gamma(max(0.f, _2109));
        _2124 = renodx::color::correct::Gamma(max(0.f, _2124));
      }

      float _2156 = 1.0f - (((_2076.w + _2072.w) + _2083.w) * 0.3333333432674407958984375f);
      float _2157 = clamp(_1463 * (((cb6[8u].w * _2109.x) + (cb6[8u].z * _2098.x)) + (cb6[9u].x * _2124.x)), 0.0f, 1.0f) * _2156;
      float _2158 = clamp(_1463 * (((cb6[8u].w * _2109.y) + (cb6[8u].z * _2098.y)) + (cb6[9u].x * _2124.y)), 0.0f, 1.0f) * _2156;
      float _2159 = clamp(_1463 * (((cb6[8u].w * _2109.z) + (cb6[8u].z * _2098.z)) + (cb6[9u].x * _2124.z)), 0.0f, 1.0f) * _2156;
      float _2251;
      float _2252;
      float _2253;
      if (_1120) {
        float _2247 = 1.0f - (dot(float3(cb6[1u].z * _1106, cb6[1u].z * _1108, cb6[1u].z * _1110), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f)) * 0.699999988079071044921875f);
        _2251 = _2247 * _2157;
        _2252 = _2247 * _2158;
        _2253 = _2247 * _2159;
      } else {
        _2251 = _2157;
        _2252 = _2158;
        _2253 = _2159;
      }
      float _2255 = dot(float3(_2251, _2252, _2253), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _2267 = cb6[1u].x * _1404;
      float _2280 = _1419 - cb6[3u].z;
      float _2281 = _1420 - cb6[3u].w;
      float4 _2287 = _13.SampleLevel(_46, float2(_2280, _2281), 0.0f);
      float _2289 = _2287.w;
      float _2302 = 1.0f - (cb6[4u].x * clamp(exp2(log2(abs((clamp(cb6[4u].y, 0.0f, 1.0f) * (_22.SampleLevel(_46, float2(_2280, _2281), cb6[4u].y + (-1.0f)).w - _2289)) + _2289)) * 0.819999992847442626953125f), 0.0f, 1.0f));
      float _2303 = _1447 * 0.00999999977648258209228515625f;
      float _2331 = (((clamp((cos((_2303 + _1420) * 1700.0f) + 1.0f) * 0.75f, 0.0f, 1.0f) * 0.00850000046193599700927734375f) + 0.00150000001303851604461669921875f) * (((_2303 + 0.540000021457672119140625f) + (_1447 * 0.100000001490116119384765625f)) + ((clamp(abs(cos(_1448 * 350.0f)), 0.0f, 1.0f) + clamp(abs(cos(_1441 * 350.0f)), 0.0f, 1.0f)) * 0.1799999773502349853515625f))) + 0.9900000095367431640625f;
      float _2333 = (_2072.x * 2.0f) * _2331;
      float _2334 = (_2076.y * 2.0f) * _2331;
      float _2335 = (_2083.z * 2.0f) * _2331;
      float _2336 = dot(float3(_2333, _2334, _2335), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _2363 = cb6[5u].x * _1404;
      float4 _2365 = _22.SampleLevel(_46, float2(_1419, _1420), cb6[5u].y);
      _2160 = (((((_2333 - _2336) * cb6[6u].z) + _2336) * _1404) + ((((_2267 * (((_2251 - _2255) * cb6[6u].z) + _2255)) + _1988) * _2156) * _2302)) + (_2365.x * _2363);
      _2162 = (((((_2334 - _2336) * cb6[6u].z) + _2336) * _1404) + ((((_2267 * (((_2252 - _2255) * cb6[6u].z) + _2255)) + _1989) * _2156) * _2302)) + (_2365.y * _2363);
      _2164 = (((((_2335 - _2336) * cb6[6u].z) + _2336) * _1404) + ((((_2267 * (((_2253 - _2255) * cb6[6u].z) + _2255)) + _1990) * _2156) * _2302)) + (_2365.z * _2363);
    } else {
      _2160 = _1988;
      _2162 = _1989;
      _2164 = _1990;
    }
    float _119;
    float _122;
    float _125;
    if (cb6[1u].y > 0.0f) {
      float4 _2373 = _13.Load(int3(uint2(_85, _86), 0u));
      float _2379 = (_1404 * 2.0f) * cb6[1u].y;
      _119 = (_2379 * _2373.x) + _2160;
      _122 = (_2379 * _2373.y) + _2162;
      _125 = (_2379 * _2373.z) + _2164;
    } else {
      _119 = _2160;
      _122 = _2162;
      _125 = _2164;
    }
    float frontier_phi_1_57_ladder;
    float frontier_phi_1_57_ladder_1;
    float frontier_phi_1_57_ladder_2;
    if (_303) {
      float _2463;
      float _2465;
      float _2467;
      float _2469;
      float _2471;
      float _2473;
      uint _2475;
      _2463 = 1.0f;
      _2465 = 1.0f;
      _2467 = 1.0f;
      _2469 = ((_87 / cb6[12u].z) * 0.800000011920928955078125f) * (cb6[12u].z / cb6[12u].w);
      _2471 = (_88 / cb6[12u].w) * 5.0f;
      _2473 = 1.0f;
      _2475 = 1u;
      float _2464;
      float _2466;
      float _2468;
      for (;;) {
        // Looks like hash44
        float _2477 = float(int(_2475));
        float _2478 = _2477 + _2469;
        float _2479 = _2477 + _2471;
        float _2480 = floor(_2478);
        float _2481 = floor(_2479);
        float _2489 = frac(_2480 * 0.103100001811981201171875f);
        float _2490 = frac(_2481 * 0.10300000011920928955078125f);
        float _2491 = frac(_2480 * 0.097300000488758087158203125f);
        float _2492 = frac(_2481 * 0.109899997711181640625f);
        float _2497 = dot(float4(_2489, _2490, _2491, _2492), float4(_2492 + 33.3300018310546875f, _2491 + 33.3300018310546875f, _2489 + 33.3300018310546875f, _2490 + 33.3300018310546875f));
        float _2500 = _2497 + _2489;
        float _2501 = _2497 + _2490;
        float _2502 = _2497 + _2491;
        float _2503 = _2497 + _2492;
        float _2512 = frac((_2500 + _2501) * _2502);
        float _2513 = frac((_2500 + _2502) * _2501);
        float _2514 = frac((_2501 + _2502) * _2503);
        bool _2533 = frac((_2502 + _2503) * _2500) > 0.5f;
        _2464 = (_2533 ? _2512 : 1.0f) * _2463;
        _2466 = (_2533 ? _2513 : 1.0f) * _2465;
        _2468 = (_2533 ? _2514 : 1.0f) * _2467;
        uint _2476 = _2475 + 1u;
        if (_2476 == 15u) {
          break;
        } else {
          _2463 = _2464;
          _2465 = _2466;
          _2467 = _2468;
          _2469 = (((_2514 * 0.20000000298023223876953125f) * (frac(_2478) - _2473)) * frac(floor(((cb0[0u].x * 0.1500000059604644775390625f) + 300.0f) / _2512) * _2512)) + _2469;
          _2471 = ((_2514 * _2513) * (frac(_2479) - _2473)) + _2471;
          _2473 *= (-2.0f);
          _2475 = _2476;
        }
      }
      float _2551 = floor((cb0[0u].x * 2.0f) + cb6[0u].y);
      float _2552 = _2551 * 0.00999999977648258209228515625f;
      float _2562 = ((_2552 + 1.0f) - (floor(_2551 * 9.9999997473787516355514526367188e-05f) * 100.0f)) * 0.00999999977648258209228515625f;
      float _2563 = ((_2551 + 1.0f) - (floor(_2552) * 100.0f)) * 0.00999999977648258209228515625f;
      float _2568 = 0.5f - (cb6[0u].y * 0.375f);
      float _2569 = (cb6[0u].y * 0.75f) + (-0.100000001490116119384765625f);
      float _2572 = frac((((floor(_1104 * 10.0f) * 0.100000001490116119384765625f) + 0.0500000007450580596923828125f) + _2562) * 0.103100001811981201171875f);
      float _2573 = frac((((floor(_1105 * 33.33333587646484375f) * 0.02999999932944774627685546875f) + 0.014999999664723873138427734375f) + _2563) * 0.103100001811981201171875f);
      float _2575 = _2572 + 33.3300018310546875f;
      float _2576 = dot(float3(_2572, _2573, _2572), float3(_2573 + 33.3300018310546875f, _2575, _2575));
      float _2584 = frac(((_2573 + _2572) + (_2576 * 2.0f)) * (_2576 + _2572));
      float _2587 = ((1.0f - _2584) * _2569) + _2584;
      float _2608 = frac((((floor(_1104 * 11.111110687255859375f) * 0.0900000035762786865234375f) + 0.04500000178813934326171875f) + _2562) * 0.103100001811981201171875f);
      float _2609 = frac((((floor(_1105 * 25.0f) * 0.039999999105930328369140625f) + 0.0199999995529651641845703125f) + _2563) * 0.103100001811981201171875f);
      float _2611 = _2608 + 33.3300018310546875f;
      float _2612 = dot(float3(_2608, _2609, _2608), float3(_2609 + 33.3300018310546875f, _2611, _2611));
      float _2620 = frac(((_2609 + _2608) + (_2612 * 2.0f)) * (_2612 + _2608));
      float _2623 = ((1.0f - _2620) * _2569) + _2620;
      float _2627 = max(0.0f, _2464);
      float _2628 = max(0.0f, _2466);
      float _2629 = max(0.0f, _2468);
      float _2631 = max(_2627, max(_2628, _2629));
      float _2632 = _2631 * _2631;
      float _2633 = _2627 * 2.0f;
      float _2634 = _2628 * 0.100000001490116119384765625f;
      float _2635 = _2629 * 0.25f;
      float _2643 = clamp((round(_2587 - (_2587 * _2568)) * 5.0f) * round(_2623 - (_2623 * _2568)), 0.0f, 1.0f) * 3.0f;
      frontier_phi_1_57_ladder = (((_2634 - _122) + (_2632 * _2634)) * _2643) + _122;
      frontier_phi_1_57_ladder_1 = (((_2635 - _125) + (_2632 * _2635)) * _2643) + _125;
      frontier_phi_1_57_ladder_2 = (((_2633 - _119) + (_2632 * _2633)) * _2643) + _119;
    } else {
      frontier_phi_1_57_ladder = _122;
      frontier_phi_1_57_ladder_1 = _125;
      frontier_phi_1_57_ladder_2 = _119;
    }
    _116 = frontier_phi_1_57_ladder_2;
    _120 = frontier_phi_1_57_ladder;
    _123 = frontier_phi_1_57_ladder_1;
  }
  bool _131 = asuint(cb6[15u]).x == 0u;
  float _306;
  float _309;
  float _311;
  if (_131) {
    _306 = _307;
    _309 = _307;
    _311 = _307;
  } else {
    float4 _318 = _8.Load(int3(uint2(_85, _86), 0u));
    float _321 = _318.x;
    float _322 = _318.y;
    float _323 = _318.z;
    float _788;
    float _789;
    float _790;
    if (cb6[12u].x > 0.0f) {
      float4 _629 = _14.Load(int3(uint2(_85 & 255u, _86 & 255u), 0u));
      if (injectedData.fxFilmGrain) {
        float3 grainedColor = renodx::effects::ApplyFilmGrain(
            float3(_321, _322, _323),
            _629.xy,
            frac(cb0[0u].x / 1000.f),
            injectedData.fxFilmGrain * 0.03f,
            (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
        _788 = grainedColor.r;
        _789 = grainedColor.g;
        _790 = grainedColor.b;
      } else {
        uint _625 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * _87), uint(cb12[79u].y * _88)), 0u)).y & 31u);
        float _631 = _629.x;
        float _632 = _629.y;
        float _633 = _629.z;
        float _636 = ((_631 + _632) + _633) * 0.3333333432674407958984375f;
        float _638 = cb6[12u].x * _321;
        float _639 = cb6[12u].x * _322;
        float _640 = cb6[12u].x * _323;
        float _655 = _631 - _636;
        float _656 = _632 - _636;
        float _657 = _633 - _636;
        float _661 = _636 + (-0.5f);
        uint4 _674 = asuint(cb6[17u]);
        float _678 = float(min((_674.x & _625), 1u));
        float _707 = float(min((_674.y & _625), 1u));
        float _736 = float(min((_674.z & _625), 1u));
        float _765 = float(min((_674.w & _625), 1u));
        float _772 = (((((((_661 + (cb6[18u].w * _655)) * cb6[18u].x) * _678) + 1.0f) * (_638 / max(1.0f - _638, 9.9999999747524270787835121154785e-07f))) * ((((_661 + (cb6[19u].w * _655)) * cb6[19u].x) * _707) + 1.0f)) * ((((_661 + (cb6[20u].w * _655)) * cb6[20u].x) * _736) + 1.0f)) * ((((_661 + (cb6[21u].w * _655)) * cb6[21u].x) * _765) + 1.0f);
        float _773 = (((((((_661 + (cb6[18u].w * _656)) * cb6[18u].y) * _678) + 1.0f) * (_639 / max(1.0f - _639, 9.9999999747524270787835121154785e-07f))) * ((((_661 + (cb6[19u].w * _656)) * cb6[19u].y) * _707) + 1.0f)) * ((((_661 + (cb6[20u].w * _656)) * cb6[20u].y) * _736) + 1.0f)) * ((((_661 + (cb6[21u].w * _656)) * cb6[21u].y) * _765) + 1.0f);
        float _774 = (((((((_661 + (cb6[18u].w * _657)) * cb6[18u].z) * _678) + 1.0f) * (_640 / max(1.0f - _640, 9.9999999747524270787835121154785e-07f))) * ((((_661 + (cb6[19u].w * _657)) * cb6[19u].z) * _707) + 1.0f)) * ((((_661 + (cb6[20u].w * _657)) * cb6[20u].z) * _736) + 1.0f)) * ((((_661 + (cb6[21u].w * _657)) * cb6[21u].z) * _765) + 1.0f);
        _788 = cb6[12u].y * (_772 / max(_772 + 1.0f, 1.0f));
        _789 = cb6[12u].y * (_773 / max(_773 + 1.0f, 1.0f));
        _790 = cb6[12u].y * (_774 / max(_774 + 1.0f, 1.0f));
      }
    } else {
      _788 = _321;
      _789 = _322;
      _790 = _323;
    }
    float frontier_phi_3_10_ladder;
    float frontier_phi_3_10_ladder_1;
    float frontier_phi_3_10_ladder_2;
    if (_115) {
      frontier_phi_3_10_ladder = 0.0f;
      frontier_phi_3_10_ladder_1 = 0.0f;
      frontier_phi_3_10_ladder_2 = 0.0f;
    } else {
      float4 _1196 = _16.SampleLevel(_46, float2(_98, _99), 0.0f);
      float4 _1203 = _15.SampleLevel(_46, float2(_98, _99), 0.0f);
      float _1208 = _1203.w;
      float _1209 = 1.0f - _1208;
      float _1214 = (_1209 * _1196.w) + _1208;
      frontier_phi_3_10_ladder = ((_1214 * ((_1203.z - _790) + (_1209 * _1196.z))) + _790) * cb6[1u].z;
      frontier_phi_3_10_ladder_1 = ((_1214 * ((_1203.y - _789) + (_1209 * _1196.y))) + _789) * cb6[1u].z;
      frontier_phi_3_10_ladder_2 = ((_1214 * ((_1203.x - _788) + (_1209 * _1196.x))) + _788) * cb6[1u].z;
    }
    _306 = frontier_phi_3_10_ladder_2;
    _309 = frontier_phi_3_10_ladder_1;
    _311 = frontier_phi_3_10_ladder;
  }
  float _599;
  float _601;
  float _603;
  if (cb6[14u].w > 0.0f) {
    uint4 _587 = asuint(cb6[10u]);
    uint _588 = _587.x;
    uint _590 = _587.z;
    uint _593 = _587.y;
    uint _596 = _587.w;
    float frontier_phi_8_7_ladder;
    float frontier_phi_8_7_ladder_1;
    float frontier_phi_8_7_ladder_2;
    if ((((_85 >= _588) && (_85 < _590)) && (_86 >= _593)) && (_86 < _596)) {
      float4 _1145 = _24.SampleLevel(_46, float2((cb6[11u].z * ((_87 - float(int(_588))) / float(int(_590 - _588)))) + cb6[11u].x, (cb6[11u].w * ((_88 - float(int(_593))) / float(int(_596 - _593)))) + cb6[11u].y), 0.0f);
      frontier_phi_8_7_ladder = _1145.y * cb6[14u].w;
      frontier_phi_8_7_ladder_1 = _1145.x * cb6[14u].w;
      frontier_phi_8_7_ladder_2 = _1145.z * cb6[14u].w;
    } else {
      frontier_phi_8_7_ladder = _120;
      frontier_phi_8_7_ladder_1 = _116;
      frontier_phi_8_7_ladder_2 = _123;
    }
    _599 = frontier_phi_8_7_ladder_1;
    _601 = frontier_phi_8_7_ladder;
    _603 = frontier_phi_8_7_ladder_2;
  } else {
    _599 = _116;
    _601 = _120;
    _603 = _123;
  }

  // Custom: Switch to colormath
  /*
  uint4 _608 = asuint(cb6[13u]);
  float _1151;
  float _1157;
  float _1163;
  if (_608.y == 0u) {
    _1151 = _599;
    _1157 = _601;
    _1163 = _603;
  } else {
    uint _1193 = _608.w;
    float _1531;
    float _1532;
    float _1533;
    if (cb6[14u].z != 1.0f) {
      _1531 = exp2(log2(abs(_599)) * cb6[14u].z);
      _1532 = exp2(log2(abs(_601)) * cb6[14u].z);
      _1533 = exp2(log2(abs(_603)) * cb6[14u].z);
    } else {
      _1531 = _599;
      _1532 = _601;
      _1533 = _603;
    }
    float _1543 = frac(_87 * 211.1488037109375f);
    float _1544 = frac(_88 * 210.944000244140625f);
    float _1545 = frac(cb0[0u].x * 6.227200031280517578125f);
    float _1548 = _1545 + 33.3300018310546875f;
    float _1549 = dot(float3(_1543, _1544, _1545), float3(_1544 + 33.3300018310546875f, _1543 + 33.3300018310546875f, _1548));
    float _1552 = _1549 + _1543;
    float _1553 = _1549 + _1544;
    float _1555 = _1552 + _1553;
    float _1560 = frac(_1555 * (_1549 + _1545));
    float _1561 = frac((_1552 * 2.0f) * _1553);
    float _1562 = frac(_1555 * _1552);
    float _1568 = frac((_87 + 64.0f) * 211.1488037109375f);
    float _1569 = frac((_88 + 64.0f) * 210.944000244140625f);
    float _1572 = dot(float3(_1568, _1569, _1545), float3(_1569 + 33.3300018310546875f, _1568 + 33.3300018310546875f, _1548));
    float _1575 = _1572 + _1568;
    float _1576 = _1572 + _1569;
    float _1578 = _1575 + _1576;
    float _1583 = frac(_1578 * (_1572 + _1545));
    float _1584 = frac((_1575 * 2.0f) * _1576);
    float _1585 = frac(_1578 * _1575);
    float frontier_phi_16_25_ladder;
    float frontier_phi_16_25_ladder_1;
    float frontier_phi_16_25_ladder_2;
    if (_1193 == 0u) {
      float _1721 = (_1531 <= 0.003130800090730190277099609375f) ? (_1531 * 12.9200000762939453125f) : ((exp2(log2(abs(_1531)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1722 = (_1532 <= 0.003130800090730190277099609375f) ? (_1532 * 12.9200000762939453125f) : ((exp2(log2(abs(_1532)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1723 = (_1533 <= 0.003130800090730190277099609375f) ? (_1533 * 12.9200000762939453125f) : ((exp2(log2(abs(_1533)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1724 = _1721 * 510.0f;
      float _1726 = _1722 * 510.0f;
      float _1727 = _1723 * 510.0f;
      frontier_phi_16_25_ladder = (((_1562 + (-0.5f)) + (min(min(1.0f, _1727), 510.0f - _1727) * (_1585 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1723;
      frontier_phi_16_25_ladder_1 = (((_1560 + (-0.5f)) + (min(min(1.0f, _1724), 510.0f - _1724) * (_1583 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1721;
      frontier_phi_16_25_ladder_2 = (((_1561 + (-0.5f)) + (min(min(1.0f, _1726), 510.0f - _1726) * (_1584 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1722;
    } else {
      float frontier_phi_16_25_ladder_33_ladder;
      float frontier_phi_16_25_ladder_33_ladder_1;
      float frontier_phi_16_25_ladder_33_ladder_2;
      if (_1193 == 1u) {
        float _1870 = mad(0.043306000530719757080078125f, _1533, mad(0.329291999340057373046875f, _1532, _1531 * 0.627402007579803466796875f));
        float _1876 = mad(0.011359999887645244598388671875f, _1533, mad(0.9195439815521240234375f, _1532, _1531 * 0.06909500062465667724609375f));
        float _1882 = mad(0.89557802677154541015625f, _1533, mad(0.08802799880504608154296875f, _1532, _1531 * 0.0163940005004405975341796875f));
        float _1918 = exp2(log2(abs((((clamp(mad(_1882, cb6[22u].z, mad(_1876, cb6[22u].y, _1870 * cb6[22u].x)), 0.0f, 1.0f) - _1870) * cb6[16u].x) + _1870) * cb6[14u].x)) * 0.1593017578125f);
        float _1919 = exp2(log2(abs((((clamp(mad(_1882, cb6[23u].z, mad(_1876, cb6[23u].y, _1870 * cb6[23u].x)), 0.0f, 1.0f) - _1876) * cb6[16u].x) + _1876) * cb6[14u].x)) * 0.1593017578125f);
        float _1920 = exp2(log2(abs((((clamp(mad(_1882, cb6[24u].z, mad(_1876, cb6[24u].y, _1870 * cb6[24u].x)), 0.0f, 1.0f) - _1882) * cb6[16u].x) + _1882) * cb6[14u].x)) * 0.1593017578125f);
        frontier_phi_16_25_ladder_33_ladder = exp2(log2(abs(((_1920 * 18.8515625f) + 0.8359375f) / ((_1920 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_16_25_ladder_33_ladder_1 = exp2(log2(abs(((_1918 * 18.8515625f) + 0.8359375f) / ((_1918 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_16_25_ladder_33_ladder_2 = exp2(log2(abs(((_1919 * 18.8515625f) + 0.8359375f) / ((_1919 * 18.6875f) + 1.0f))) * 78.84375f);
      } else {
        float frontier_phi_16_25_ladder_33_ladder_41_ladder;
        float frontier_phi_16_25_ladder_33_ladder_41_ladder_1;
        float frontier_phi_16_25_ladder_33_ladder_41_ladder_2;
        if (_1193 == 2u) {
          frontier_phi_16_25_ladder_33_ladder_41_ladder = _1533 * cb6[14u].x;
          frontier_phi_16_25_ladder_33_ladder_41_ladder_1 = _1531 * cb6[14u].x;
          frontier_phi_16_25_ladder_33_ladder_41_ladder_2 = _1532 * cb6[14u].x;
        } else {
          float frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder;
          float frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_1;
          float frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_2;
          if (_1193 == 3u) {
            float _2178 = mad(_1533, cb6[22u].z, mad(_1532, cb6[22u].y, _1531 * cb6[22u].x)) * cb6[14u].x;
            float _2179 = mad(_1533, cb6[23u].z, mad(_1532, cb6[23u].y, _1531 * cb6[23u].x)) * cb6[14u].x;
            float _2180 = mad(_1533, cb6[24u].z, mad(_1532, cb6[24u].y, _1531 * cb6[24u].x)) * cb6[14u].x;
            float _2205 = (_2178 <= 0.003130800090730190277099609375f) ? (_2178 * 12.9200000762939453125f) : ((exp2(log2(abs(_2178)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2206 = (_2179 <= 0.003130800090730190277099609375f) ? (_2179 * 12.9200000762939453125f) : ((exp2(log2(abs(_2179)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2207 = (_2180 <= 0.003130800090730190277099609375f) ? (_2180 * 12.9200000762939453125f) : ((exp2(log2(abs(_2180)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2208 = _2205 * 2046.0f;
            float _2210 = _2206 * 2046.0f;
            float _2211 = _2207 * 2046.0f;
            frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder = (((_1562 + (-0.5f)) + (min(min(1.0f, _2211), 2046.0f - _2211) * (_1585 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2207;
            frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_1 = (((_1560 + (-0.5f)) + (min(min(1.0f, _2208), 2046.0f - _2208) * (_1583 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2205;
            frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_2 = (((_1561 + (-0.5f)) + (min(min(1.0f, _2210), 2046.0f - _2210) * (_1584 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2206;
          } else {
            frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder = (_1533 * cb6[14u].x) + cb6[14u].y;
            frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_1 = (_1531 * cb6[14u].x) + cb6[14u].y;
            frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_2 = (_1532 * cb6[14u].x) + cb6[14u].y;
          }
          frontier_phi_16_25_ladder_33_ladder_41_ladder = frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder;
          frontier_phi_16_25_ladder_33_ladder_41_ladder_1 = frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_1;
          frontier_phi_16_25_ladder_33_ladder_41_ladder_2 = frontier_phi_16_25_ladder_33_ladder_41_ladder_47_ladder_2;
        }
        frontier_phi_16_25_ladder_33_ladder = frontier_phi_16_25_ladder_33_ladder_41_ladder;
        frontier_phi_16_25_ladder_33_ladder_1 = frontier_phi_16_25_ladder_33_ladder_41_ladder_1;
        frontier_phi_16_25_ladder_33_ladder_2 = frontier_phi_16_25_ladder_33_ladder_41_ladder_2;
      }
      frontier_phi_16_25_ladder = frontier_phi_16_25_ladder_33_ladder;
      frontier_phi_16_25_ladder_1 = frontier_phi_16_25_ladder_33_ladder_1;
      frontier_phi_16_25_ladder_2 = frontier_phi_16_25_ladder_33_ladder_2;
    }
    _1151 = frontier_phi_16_25_ladder_1;
    _1157 = frontier_phi_16_25_ladder_2;
    _1163 = frontier_phi_16_25_ladder;
  }
  float _1466;
  float _1472;
  float _1478;
  if (_131) {
    _1466 = _306;
    _1472 = _309;
    _1478 = _311;
  } else {
    uint _1517 = _608.w;
    float _1640;
    float _1641;
    float _1642;
    if (cb6[15u].w != 1.0f) {
      _1640 = exp2(log2(abs(_306)) * cb6[15u].w);
      _1641 = exp2(log2(abs(_309)) * cb6[15u].w);
      _1642 = exp2(log2(abs(_311)) * cb6[15u].w);
    } else {
      _1640 = _306;
      _1641 = _309;
      _1642 = _311;
    }
    float _1649 = frac(_87 * 211.1488037109375f);
    float _1650 = frac(_88 * 210.944000244140625f);
    float _1651 = frac(cb0[0u].x * 6.227200031280517578125f);
    float _1654 = _1651 + 33.3300018310546875f;
    float _1655 = dot(float3(_1649, _1650, _1651), float3(_1650 + 33.3300018310546875f, _1649 + 33.3300018310546875f, _1654));
    float _1658 = _1655 + _1649;
    float _1659 = _1655 + _1650;
    float _1661 = _1658 + _1659;
    float _1666 = frac(_1661 * (_1655 + _1651));
    float _1667 = frac((_1658 * 2.0f) * _1659);
    float _1668 = frac(_1661 * _1658);
    float _1673 = frac((_87 + 64.0f) * 211.1488037109375f);
    float _1674 = frac((_88 + 64.0f) * 210.944000244140625f);
    float _1677 = dot(float3(_1673, _1674, _1651), float3(_1674 + 33.3300018310546875f, _1673 + 33.3300018310546875f, _1654));
    float _1680 = _1677 + _1673;
    float _1681 = _1677 + _1674;
    float _1683 = _1680 + _1681;
    float _1688 = frac(_1683 * (_1677 + _1651));
    float _1689 = frac((_1680 * 2.0f) * _1681);
    float _1690 = frac(_1683 * _1680);
    float frontier_phi_22_31_ladder;
    float frontier_phi_22_31_ladder_1;
    float frontier_phi_22_31_ladder_2;
    if (_1517 == 0u) {
      float _1835 = (_1640 <= 0.003130800090730190277099609375f) ? (_1640 * 12.9200000762939453125f) : ((exp2(log2(abs(_1640)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1836 = (_1641 <= 0.003130800090730190277099609375f) ? (_1641 * 12.9200000762939453125f) : ((exp2(log2(abs(_1641)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1837 = (_1642 <= 0.003130800090730190277099609375f) ? (_1642 * 12.9200000762939453125f) : ((exp2(log2(abs(_1642)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1838 = _1835 * 510.0f;
      float _1839 = _1836 * 510.0f;
      float _1840 = _1837 * 510.0f;
      frontier_phi_22_31_ladder = (((_1666 + (-0.5f)) + (min(min(1.0f, _1838), 510.0f - _1838) * (_1688 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1835;
      frontier_phi_22_31_ladder_1 = (((_1668 + (-0.5f)) + (min(min(1.0f, _1840), 510.0f - _1840) * (_1690 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1837;
      frontier_phi_22_31_ladder_2 = (((_1667 + (-0.5f)) + (min(min(1.0f, _1839), 510.0f - _1839) * (_1689 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1836;
    } else {
      float frontier_phi_22_31_ladder_39_ladder;
      float frontier_phi_22_31_ladder_39_ladder_1;
      float frontier_phi_22_31_ladder_39_ladder_2;
      if (_1517 == 1u) {
        float _1995 = mad(0.043306000530719757080078125f, _1642, mad(0.329291999340057373046875f, _1641, _1640 * 0.627402007579803466796875f));
        float _1998 = mad(0.011359999887645244598388671875f, _1642, mad(0.9195439815521240234375f, _1641, _1640 * 0.06909500062465667724609375f));
        float _2001 = mad(0.89557802677154541015625f, _1642, mad(0.08802799880504608154296875f, _1641, _1640 * 0.0163940005004405975341796875f));
        float _2035 = exp2(log2(abs((((clamp(mad(_2001, cb6[26u].z, mad(_1998, cb6[26u].y, _1995 * cb6[26u].x)), 0.0f, 1.0f) - _1995) * cb6[16u].x) + _1995) * cb6[15u].y)) * 0.1593017578125f);
        float _2036 = exp2(log2(abs((((clamp(mad(_2001, cb6[27u].z, mad(_1998, cb6[27u].y, _1995 * cb6[27u].x)), 0.0f, 1.0f) - _1998) * cb6[16u].x) + _1998) * cb6[15u].y)) * 0.1593017578125f);
        float _2037 = exp2(log2(abs((((clamp(mad(_2001, cb6[28u].z, mad(_1998, cb6[28u].y, _1995 * cb6[28u].x)), 0.0f, 1.0f) - _2001) * cb6[16u].x) + _2001) * cb6[15u].y)) * 0.1593017578125f);
        frontier_phi_22_31_ladder_39_ladder = exp2(log2(abs(((_2035 * 18.8515625f) + 0.8359375f) / ((_2035 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_22_31_ladder_39_ladder_1 = exp2(log2(abs(((_2037 * 18.8515625f) + 0.8359375f) / ((_2037 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_22_31_ladder_39_ladder_2 = exp2(log2(abs(((_2036 * 18.8515625f) + 0.8359375f) / ((_2036 * 18.6875f) + 1.0f))) * 78.84375f);
      } else {
        float frontier_phi_22_31_ladder_39_ladder_45_ladder;
        float frontier_phi_22_31_ladder_39_ladder_45_ladder_1;
        float frontier_phi_22_31_ladder_39_ladder_45_ladder_2;
        if (_1517 == 2u) {
          frontier_phi_22_31_ladder_39_ladder_45_ladder = _1640 * cb6[15u].y;
          frontier_phi_22_31_ladder_39_ladder_45_ladder_1 = _1642 * cb6[15u].y;
          frontier_phi_22_31_ladder_39_ladder_45_ladder_2 = _1641 * cb6[15u].y;
        } else {
          float frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder;
          float frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_1;
          float frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_2;
          if (_1517 == 3u) {
            float _2395 = mad(_1642, cb6[26u].z, mad(_1641, cb6[26u].y, _1640 * cb6[26u].x)) * cb6[15u].y;
            float _2396 = mad(_1642, cb6[27u].z, mad(_1641, cb6[27u].y, _1640 * cb6[27u].x)) * cb6[15u].y;
            float _2397 = mad(_1642, cb6[28u].z, mad(_1641, cb6[28u].y, _1640 * cb6[28u].x)) * cb6[15u].y;
            float _2422 = (_2395 <= 0.003130800090730190277099609375f) ? (_2395 * 12.9200000762939453125f) : ((exp2(log2(abs(_2395)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2423 = (_2396 <= 0.003130800090730190277099609375f) ? (_2396 * 12.9200000762939453125f) : ((exp2(log2(abs(_2396)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2424 = (_2397 <= 0.003130800090730190277099609375f) ? (_2397 * 12.9200000762939453125f) : ((exp2(log2(abs(_2397)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2425 = _2422 * 2046.0f;
            float _2426 = _2423 * 2046.0f;
            float _2427 = _2424 * 2046.0f;
            frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder = (((_1666 + (-0.5f)) + (min(min(1.0f, _2425), 2046.0f - _2425) * (_1688 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2422;
            frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_1 = (((_1668 + (-0.5f)) + (min(min(1.0f, _2427), 2046.0f - _2427) * (_1690 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2424;
            frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_2 = (((_1667 + (-0.5f)) + (min(min(1.0f, _2426), 2046.0f - _2426) * (_1689 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2423;
          } else {
            frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder = (_1640 * cb6[15u].y) + cb6[15u].z;
            frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_1 = (_1642 * cb6[15u].y) + cb6[15u].z;
            frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_2 = (_1641 * cb6[15u].y) + cb6[15u].z;
          }
          frontier_phi_22_31_ladder_39_ladder_45_ladder = frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder;
          frontier_phi_22_31_ladder_39_ladder_45_ladder_1 = frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_1;
          frontier_phi_22_31_ladder_39_ladder_45_ladder_2 = frontier_phi_22_31_ladder_39_ladder_45_ladder_51_ladder_2;
        }
        frontier_phi_22_31_ladder_39_ladder = frontier_phi_22_31_ladder_39_ladder_45_ladder;
        frontier_phi_22_31_ladder_39_ladder_1 = frontier_phi_22_31_ladder_39_ladder_45_ladder_1;
        frontier_phi_22_31_ladder_39_ladder_2 = frontier_phi_22_31_ladder_39_ladder_45_ladder_2;
      }
      frontier_phi_22_31_ladder = frontier_phi_22_31_ladder_39_ladder;
      frontier_phi_22_31_ladder_1 = frontier_phi_22_31_ladder_39_ladder_1;
      frontier_phi_22_31_ladder_2 = frontier_phi_22_31_ladder_39_ladder_2;
    }
    _1466 = frontier_phi_22_31_ladder;
    _1472 = frontier_phi_22_31_ladder_2;
    _1478 = frontier_phi_22_31_ladder_1;
  }
  _27[uint2(_85, _86)] = float4(_1151, _1157, _1163, 1.0f);
  if (!(asuint(cb6[15u]).x == 0u)) {
    _28[uint2(_85, _86)] = float4(_1466, _1472, _1478, 1.0f);
  }
  */

  uint outputTypeEnum = asuint(cb6[13u].w);

  float3 outputColor1 = float3(_599, _601, _603);
  if (asuint(cb6[13u].y) != 0u) {
    ConvertColorParams params = {
      outputTypeEnum,  // outputTypeEnum
      cb6[14u].x,      // paperWhiteScaling
      cb6[14u].y,      // blackFloorAdjust
      cb6[14u].z,      // gammaCorrection
      cb6[16u].x,      // pqSaturation
      float3x3(
          cb6[22u].x, cb6[22u].y, cb6[22u].z,
          cb6[23u].x, cb6[23u].y, cb6[23u].z,
          cb6[24u].x, cb6[24u].y, cb6[24u].z),  // pqMatrix
      float3(_87, _88, cb0[0u].x)               // random3
    };
    outputColor1 = convertColor(outputColor1, params);
  }

  _27[uint2(_85, _86)] = float4(outputColor1.rgb, 1.0f);

  if (!_131) {
    float3 outputColor2 = float3(_306, _309, _311);
    ConvertColorParams params = {
      outputTypeEnum,  // outputTypeEnum
      cb6[15u].y,      // paperWhiteScaling
      cb6[15u].z,      // blackFloorAdjust
      cb6[15u].w,      // gammaCorrection
      cb6[16u].x,      // pqSaturation
      float3x3(
          cb6[26u].x, cb6[26u].y, cb6[26u].z,
          cb6[27u].x, cb6[27u].y, cb6[27u].z,
          cb6[28u].x, cb6[28u].y, cb6[28u].z),  // pqMatrix
      float3(_87, _88, cb0[0u].x)               // random3
    };

    outputColor2 = convertColor(outputColor2, params);
    _28[uint2(_85, _86)] = float4(outputColor2.rgb, 1.0f);
  }
}

[numthreads(16, 16, 1)]
void main(SPIRV_Cross_Input stage_input) {
  gl_WorkGroupID = stage_input.gl_WorkGroupID;
  gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
  comp_main();
}
